<keras.engine.sequential.Sequential object at 0x0000022E3B0CF650>
Loading time for LSTM (dataset sundaram_factors, range TR1): 0.07601618766784668
Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    345.9 MiB    345.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    345.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    356.0 MiB     10.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    356.0 MiB    356.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    356.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    356.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    356.2 MiB    356.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    356.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    356.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    356.7 MiB    356.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    356.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    357.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    357.3 MiB    357.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    357.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    357.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    357.7 MiB    357.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    357.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    358.7 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    358.7 MiB    358.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    358.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    359.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    359.4 MiB    359.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    359.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    359.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    359.7 MiB    359.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    359.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    360.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    360.5 MiB    360.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    360.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    361.2 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    361.2 MiB    361.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    361.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    361.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    361.3 MiB    361.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    361.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    361.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    361.4 MiB    361.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    361.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    361.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    361.5 MiB    361.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    361.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    361.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    361.9 MiB    361.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    361.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    362.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    362.2 MiB    362.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    362.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    362.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    362.8 MiB    362.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    362.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    363.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    363.1 MiB    363.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    363.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    363.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    363.6 MiB    363.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    363.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    363.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    363.7 MiB    363.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    363.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    363.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    363.9 MiB    363.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    363.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    364.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    364.5 MiB    364.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    364.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    364.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    364.5 MiB    364.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    364.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    364.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    364.7 MiB    364.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    364.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    365.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    365.1 MiB    365.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    365.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    365.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    365.2 MiB    365.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    365.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    365.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    365.5 MiB    365.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    365.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    365.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    365.8 MiB    365.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    365.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    366.7 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    366.7 MiB    366.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    366.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    367.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    367.0 MiB    367.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    367.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    367.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    367.0 MiB    367.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    367.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    367.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    367.0 MiB    367.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    367.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    367.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    367.5 MiB    367.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    367.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    367.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    367.7 MiB    367.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    367.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    368.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    368.1 MiB    368.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    368.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    368.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    368.2 MiB    368.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    368.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    369.2 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    369.2 MiB    369.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    369.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    369.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    369.6 MiB    369.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    369.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    369.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    369.9 MiB    369.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    369.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    370.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    370.0 MiB    370.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    370.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    370.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    370.0 MiB    370.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    370.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    370.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    370.1 MiB    370.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    370.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    370.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    370.3 MiB    370.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    370.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    370.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    370.9 MiB    370.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    370.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    370.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    370.9 MiB    370.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    370.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    371.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    371.2 MiB    371.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    371.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    371.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    371.8 MiB    371.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    371.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    371.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    371.9 MiB    371.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    371.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    372.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    372.2 MiB    372.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    372.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    372.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    372.2 MiB    372.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    372.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    372.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    372.2 MiB    372.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    372.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    372.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    372.8 MiB    372.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    372.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    372.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    372.8 MiB    372.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    372.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    373.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    373.1 MiB    373.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    373.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    373.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    373.4 MiB    373.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    373.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    373.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    373.6 MiB    373.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    373.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    374.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    374.2 MiB    374.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    374.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    374.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    374.8 MiB    374.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    374.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    375.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    375.2 MiB    375.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    375.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    375.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    375.4 MiB    375.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    375.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    375.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    375.9 MiB    375.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    375.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    375.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    375.9 MiB    375.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    375.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    376.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    376.2 MiB    376.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    376.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    376.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    376.5 MiB    376.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    376.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    377.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    377.2 MiB    377.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    377.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    377.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    377.6 MiB    377.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    377.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    378.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    378.2 MiB    378.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    378.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    378.9 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    378.9 MiB    378.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    378.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    378.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    378.9 MiB    378.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    378.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    379.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    379.1 MiB    379.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    379.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    379.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    379.2 MiB    379.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    379.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    379.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    379.2 MiB    379.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    379.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    379.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    379.4 MiB    379.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    379.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    379.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    379.7 MiB    379.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    379.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    379.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    379.9 MiB    379.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    379.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    380.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    380.5 MiB    380.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    380.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    381.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    381.0 MiB    381.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    381.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    381.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    381.1 MiB    381.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    381.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    381.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    381.1 MiB    381.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    381.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    381.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    381.3 MiB    381.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    381.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    381.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    381.5 MiB    381.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    381.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    382.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    382.3 MiB    382.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    382.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    382.9 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    382.9 MiB    382.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    382.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    383.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    383.2 MiB    383.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    383.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    383.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    383.5 MiB    383.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    383.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    384.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    384.0 MiB    384.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    384.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    384.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    384.2 MiB    384.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    384.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    384.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    384.5 MiB    384.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    384.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    384.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    384.5 MiB    384.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    384.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    384.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    384.7 MiB    384.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    384.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    384.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    384.7 MiB    384.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    384.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    385.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    385.2 MiB    385.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    385.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    385.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    385.4 MiB    385.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    385.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    385.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    385.5 MiB    385.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    385.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    385.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    385.9 MiB    385.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    385.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    386.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    386.3 MiB    386.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    386.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    387.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    387.0 MiB    387.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    387.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    387.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    387.2 MiB    387.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    387.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    387.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    387.5 MiB    387.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    387.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    387.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    387.8 MiB    387.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    387.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    387.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    387.9 MiB    387.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    387.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    387.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    387.9 MiB    387.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    387.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    388.9 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    388.9 MiB    388.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    388.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    389.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    389.4 MiB    389.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    389.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    389.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    389.7 MiB    389.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    389.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    389.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    389.7 MiB    389.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    389.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    390.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    390.6 MiB    390.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    390.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    390.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    390.6 MiB    390.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    390.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    390.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    390.6 MiB    390.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    390.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    390.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    390.8 MiB    390.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    390.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    390.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    390.8 MiB    390.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    390.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    390.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    390.8 MiB    390.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    390.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    391.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    391.4 MiB    391.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    391.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    391.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    391.8 MiB    391.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    391.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    392.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    392.2 MiB    392.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    392.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    393.4 MiB      1.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    393.4 MiB    393.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    393.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    393.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    393.5 MiB    393.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    393.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    393.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    393.5 MiB    393.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    393.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    393.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    393.8 MiB    393.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    393.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    394.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    394.2 MiB    394.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    394.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    394.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    394.5 MiB    394.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    394.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    394.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    394.5 MiB    394.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    394.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    395.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    395.1 MiB    395.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    395.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    395.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    395.1 MiB    395.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    395.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    395.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    395.5 MiB    395.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    395.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    396.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    396.0 MiB    396.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    396.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    396.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    396.4 MiB    396.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    396.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    396.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    396.5 MiB    396.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    396.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    396.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    396.5 MiB    396.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    396.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    396.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    396.7 MiB    396.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    396.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    396.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    396.8 MiB    396.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    396.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    397.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    397.1 MiB    397.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    397.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    397.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    397.2 MiB    397.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    397.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    397.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    397.6 MiB    397.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    397.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    398.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    398.2 MiB    398.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    398.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    398.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    398.7 MiB    398.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    398.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    399.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    399.2 MiB    399.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    399.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    399.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    399.2 MiB    399.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    399.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    399.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    399.2 MiB    399.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    399.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    399.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    399.2 MiB    399.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    399.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    399.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    399.2 MiB    399.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    399.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    399.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    399.7 MiB    399.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    399.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    400.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    400.3 MiB    400.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    400.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    400.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    400.4 MiB    400.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    400.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    400.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    400.8 MiB    400.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    400.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    401.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    401.4 MiB    401.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    401.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    401.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    401.9 MiB    401.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    401.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.0 MiB    402.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.0 MiB    402.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.0 MiB    402.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.2 MiB    402.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.3 MiB    402.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.6 MiB    402.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    402.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    402.7 MiB    402.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    402.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    403.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    403.1 MiB    403.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    403.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    403.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    403.3 MiB    403.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    403.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    404.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    404.1 MiB    404.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    404.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    404.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    404.2 MiB    404.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    404.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    404.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    404.4 MiB    404.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    404.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    404.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    404.5 MiB    404.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    404.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    404.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    404.6 MiB    404.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    404.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    405.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    405.0 MiB    405.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    405.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    405.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    405.7 MiB    405.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    405.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    405.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    405.8 MiB    405.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    405.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    406.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    406.4 MiB    406.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    406.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    407.1 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    407.1 MiB    407.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    407.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    407.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    407.5 MiB    407.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    407.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    407.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    407.6 MiB    407.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    407.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    407.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    407.6 MiB    407.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    407.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    407.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    407.7 MiB    407.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    407.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    407.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    407.7 MiB    407.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    407.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    408.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    408.0 MiB    408.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    408.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    408.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    408.0 MiB    408.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    408.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    408.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    408.1 MiB    408.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    408.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    408.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    408.2 MiB    408.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    408.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    409.3 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    409.3 MiB    409.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    409.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    409.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    409.9 MiB    409.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    409.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.2 MiB    410.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.3 MiB    410.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.3 MiB    410.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.3 MiB    410.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.3 MiB    410.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.8 MiB    410.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    410.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    410.9 MiB    410.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    410.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    411.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    411.3 MiB    411.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    411.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    411.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    411.8 MiB    411.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    411.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    412.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    412.5 MiB    412.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    412.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    412.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    412.6 MiB    412.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    412.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    412.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    412.6 MiB    412.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    412.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    412.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    412.9 MiB    412.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    412.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    413.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    413.1 MiB    413.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    413.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    413.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    413.5 MiB    413.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    413.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    413.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    413.9 MiB    413.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    413.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    414.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    414.5 MiB    414.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    414.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    414.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    414.9 MiB    414.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    414.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    415.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    415.4 MiB    415.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    415.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.1 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.1 MiB    416.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.3 MiB    416.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.3 MiB    416.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.6 MiB    416.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.6 MiB    416.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.7 MiB    416.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.8 MiB    416.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    416.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    416.8 MiB    416.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    416.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    417.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    417.4 MiB    417.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    417.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    417.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    417.5 MiB    417.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    417.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    417.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    417.9 MiB    417.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    417.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    418.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    418.1 MiB    418.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    418.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    418.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    418.5 MiB    418.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    418.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    418.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    418.6 MiB    418.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    418.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    418.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    418.6 MiB    418.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    418.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    418.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    418.9 MiB    418.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    418.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    419.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    419.1 MiB    419.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    419.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    419.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    419.2 MiB    419.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    419.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    419.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    419.8 MiB    419.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    419.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    420.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    420.0 MiB    420.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    420.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    420.8 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    420.8 MiB    420.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    420.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    420.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    420.8 MiB    420.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    420.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    420.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    420.9 MiB    420.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    420.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    420.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    420.9 MiB    420.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    420.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    421.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    421.3 MiB    421.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    421.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    421.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    421.5 MiB    421.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    421.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    421.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    421.6 MiB    421.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    421.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    422.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    422.0 MiB    422.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    422.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    422.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    422.5 MiB    422.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    422.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.0 MiB    423.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.1 MiB    423.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.1 MiB    423.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.1 MiB    423.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.2 MiB    423.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.9 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.9 MiB    423.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    423.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    423.9 MiB    423.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    423.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    424.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    424.4 MiB    424.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    424.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    424.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    424.7 MiB    424.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    424.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    424.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    424.8 MiB    424.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    424.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    425.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    425.6 MiB    425.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    425.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.1 MiB    426.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.1 MiB    426.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.1 MiB    426.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.1 MiB    426.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.1 MiB    426.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.1 MiB    426.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    426.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    426.8 MiB    426.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    426.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    427.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    427.1 MiB    427.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    427.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    427.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    427.7 MiB    427.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    427.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    428.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    428.0 MiB    428.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    428.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    428.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    428.6 MiB    428.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    428.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    428.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    428.6 MiB    428.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    428.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    428.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    428.7 MiB    428.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    428.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    428.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    428.7 MiB    428.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    428.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    428.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    428.9 MiB    428.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    428.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    429.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    429.2 MiB    429.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    429.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    429.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    429.6 MiB    429.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    429.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    429.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    429.6 MiB    429.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    429.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    429.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    429.9 MiB    429.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    429.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    430.9 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    430.9 MiB    430.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    430.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    431.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    431.6 MiB    431.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    431.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    431.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    431.9 MiB    431.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    431.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    432.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    432.0 MiB    432.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    432.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    432.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    432.0 MiB    432.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    432.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    432.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    432.1 MiB    432.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    432.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    432.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    432.1 MiB    432.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    432.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    433.0 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    433.0 MiB    433.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    433.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    433.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    433.5 MiB    433.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    433.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    433.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    433.5 MiB    433.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    433.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    433.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    433.6 MiB    433.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    433.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    434.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    434.2 MiB    434.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    434.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    434.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    434.3 MiB    434.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    434.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    434.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    434.5 MiB    434.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    434.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    434.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    434.5 MiB    434.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    434.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    435.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    435.1 MiB    435.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    435.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    435.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    435.1 MiB    435.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    435.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    435.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    435.1 MiB    435.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    435.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    435.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    435.3 MiB    435.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    435.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    435.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    435.5 MiB    435.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    435.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.0 MiB    436.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.2 MiB    436.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.2 MiB    436.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.3 MiB    436.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.4 MiB    436.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.4 MiB    436.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    436.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    436.8 MiB    436.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    436.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    437.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    437.3 MiB    437.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    437.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    437.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    437.8 MiB    437.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    437.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    437.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    437.8 MiB    437.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    437.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    437.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    437.8 MiB    437.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    437.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    438.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    438.3 MiB    438.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    438.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    438.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    438.4 MiB    438.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    438.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    438.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    438.4 MiB    438.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    438.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    438.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    438.7 MiB    438.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    438.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    438.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    438.8 MiB    438.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    438.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    439.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    439.1 MiB    439.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    439.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    439.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    439.3 MiB    439.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    439.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    439.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    439.6 MiB    439.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    439.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    440.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    440.3 MiB    440.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    440.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    441.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    441.1 MiB    441.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    441.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    441.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    441.6 MiB    441.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    441.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    441.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    441.7 MiB    441.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    441.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    442.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    442.0 MiB    442.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    442.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    442.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    442.3 MiB    442.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    442.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    442.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    442.4 MiB    442.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    442.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    442.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    442.5 MiB    442.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    442.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    442.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    442.6 MiB    442.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    442.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    443.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    443.1 MiB    443.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    443.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    443.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    443.3 MiB    443.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    443.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    443.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    443.7 MiB    443.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    443.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    444.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    444.2 MiB    444.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    444.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    444.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    444.3 MiB    444.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    444.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    444.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    444.8 MiB    444.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    444.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    444.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    444.8 MiB    444.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    444.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    444.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    444.8 MiB    444.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    444.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    445.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    445.4 MiB    445.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    445.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    445.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    445.7 MiB    445.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    445.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    446.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    446.2 MiB    446.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    446.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    446.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    446.4 MiB    446.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    446.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    446.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    446.9 MiB    446.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    446.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.0 MiB    447.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.2 MiB    447.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.2 MiB    447.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.2 MiB    447.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.2 MiB    447.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.5 MiB    447.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    447.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    447.8 MiB    447.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    447.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    448.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    448.3 MiB    448.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    448.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    448.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    448.6 MiB    448.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    448.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    449.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    449.4 MiB    449.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    449.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    449.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    449.5 MiB    449.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    449.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    449.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    449.7 MiB    449.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    449.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    449.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    449.7 MiB    449.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    449.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    450.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    450.1 MiB    450.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    450.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    450.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    450.9 MiB    450.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    450.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    451.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    451.2 MiB    451.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    451.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    451.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    451.3 MiB    451.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    451.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    451.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    451.8 MiB    451.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    451.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    452.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    452.1 MiB    452.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    452.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    453.1 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    453.1 MiB    453.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    453.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    453.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    453.7 MiB    453.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    453.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    453.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    453.8 MiB    453.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    453.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    453.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    453.9 MiB    453.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    453.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    454.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    454.2 MiB    454.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    454.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    454.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    454.2 MiB    454.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    454.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    454.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    454.4 MiB    454.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    454.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    455.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    455.0 MiB    455.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    455.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    455.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    455.2 MiB    455.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    455.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    455.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    455.2 MiB    455.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    455.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    455.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    455.6 MiB    455.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    455.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    456.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    456.2 MiB    456.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    456.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    456.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    456.3 MiB    456.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    456.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    456.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    456.3 MiB    456.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    456.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    456.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    456.5 MiB    456.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    456.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    456.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    456.9 MiB    456.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    456.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    457.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    457.2 MiB    457.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    457.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    457.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    457.4 MiB    457.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    457.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    457.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    457.6 MiB    457.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    457.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.0 MiB    458.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.5 MiB    458.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.6 MiB    458.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.7 MiB    458.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.7 MiB    458.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.7 MiB    458.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    458.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    458.8 MiB    458.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    458.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    459.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    459.1 MiB    459.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    459.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    459.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    459.5 MiB    459.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    459.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    459.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    459.6 MiB    459.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    459.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    460.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    460.0 MiB    460.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    460.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    460.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    460.2 MiB    460.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    460.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    460.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    460.6 MiB    460.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    460.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    461.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    461.0 MiB    461.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    461.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    461.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    461.1 MiB    461.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    461.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    461.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    461.1 MiB    461.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    461.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    461.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    461.6 MiB    461.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    461.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    461.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    461.7 MiB    461.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    461.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    462.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    462.0 MiB    462.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    462.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    462.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    462.6 MiB    462.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    462.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    462.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    462.6 MiB    462.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    462.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    463.5 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    463.5 MiB    463.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    463.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    463.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    463.6 MiB    463.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    463.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    463.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    463.7 MiB    463.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    463.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    464.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    464.1 MiB    464.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    464.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    464.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    464.1 MiB    464.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    464.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    464.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    464.2 MiB    464.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    464.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    464.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    464.8 MiB    464.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    464.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    465.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    465.3 MiB    465.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    465.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    465.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    465.8 MiB    465.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    465.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    465.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    465.9 MiB    465.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    465.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    466.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    466.5 MiB    466.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    466.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    467.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    467.0 MiB    467.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    467.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    467.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    467.2 MiB    467.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    467.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    467.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    467.2 MiB    467.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    467.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    467.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    467.2 MiB    467.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    467.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    468.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    468.0 MiB    468.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    468.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    468.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    468.0 MiB    468.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    468.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    468.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    468.0 MiB    468.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    468.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    468.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    468.2 MiB    468.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    468.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    469.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    469.0 MiB    469.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    469.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    469.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    469.3 MiB    469.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    469.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    469.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    469.9 MiB    469.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    469.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    470.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    470.1 MiB    470.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    470.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    470.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    470.2 MiB    470.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    470.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    470.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    470.3 MiB    470.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    470.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    470.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    470.3 MiB    470.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    470.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    470.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    470.3 MiB    470.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    470.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    470.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    470.5 MiB    470.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    470.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    471.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    471.0 MiB    471.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    471.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    471.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    471.4 MiB    471.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    471.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    471.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    471.6 MiB    471.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    471.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    472.4 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    472.4 MiB    472.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    472.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    472.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    472.5 MiB    472.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    472.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    472.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    472.5 MiB    472.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    472.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    472.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    472.5 MiB    472.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    472.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    472.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    472.5 MiB    472.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    472.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    473.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    473.2 MiB    473.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    473.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    473.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    473.3 MiB    473.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    473.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    473.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    473.9 MiB    473.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    473.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    474.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    474.4 MiB    474.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    474.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    474.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    474.5 MiB    474.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    474.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    474.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    474.9 MiB    474.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    474.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    475.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    475.1 MiB    475.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    475.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    475.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    475.2 MiB    475.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    475.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    475.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    475.2 MiB    475.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    475.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    475.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    475.2 MiB    475.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    475.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    475.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    475.4 MiB    475.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    475.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    475.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    475.7 MiB    475.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    475.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    476.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    476.2 MiB    476.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    476.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    476.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    476.4 MiB    476.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    476.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.0 MiB    477.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.3 MiB    477.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.4 MiB    477.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.5 MiB    477.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.5 MiB    477.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.7 MiB    477.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    477.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    477.9 MiB    477.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    477.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    478.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    478.5 MiB    478.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    478.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    478.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    478.8 MiB    478.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    478.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    479.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    479.0 MiB    479.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    479.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    479.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    479.8 MiB    479.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    479.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    480.7 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    480.7 MiB    480.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    480.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    480.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    480.7 MiB    480.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    480.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    480.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    480.8 MiB    480.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    480.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    480.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    480.8 MiB    480.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    480.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    480.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    480.8 MiB    480.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    480.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    481.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    481.3 MiB    481.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    481.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    481.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    481.4 MiB    481.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    481.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    481.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    481.5 MiB    481.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    481.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    481.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    481.8 MiB    481.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    481.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    482.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    482.4 MiB    482.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    482.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    483.5 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    483.5 MiB    483.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    483.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    483.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    483.6 MiB    483.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    483.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    483.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    483.6 MiB    483.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    483.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    483.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    483.6 MiB    483.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    483.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    483.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    483.6 MiB    483.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    483.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    483.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    483.8 MiB    483.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    483.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    484.6 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    484.6 MiB    484.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    484.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    484.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    484.7 MiB    484.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    484.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    485.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    485.5 MiB    485.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    485.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    485.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    485.5 MiB    485.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    485.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    485.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    485.6 MiB    485.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    485.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    486.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    486.0 MiB    486.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    486.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    486.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    486.0 MiB    486.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    486.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    486.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    486.0 MiB    486.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    486.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    486.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    486.0 MiB    486.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    486.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    486.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    486.8 MiB    486.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    486.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    487.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    487.4 MiB    487.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    487.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    487.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    487.5 MiB    487.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    487.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    487.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    487.6 MiB    487.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    487.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    488.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    488.4 MiB    488.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    488.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    488.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    488.5 MiB    488.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    488.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    488.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    488.7 MiB    488.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    488.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    488.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    488.8 MiB    488.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    488.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    488.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    488.9 MiB    488.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    488.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    489.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    489.1 MiB    489.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    489.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    489.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    489.2 MiB    489.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    489.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    489.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    489.5 MiB    489.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    489.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    489.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    489.9 MiB    489.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    489.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    490.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    490.3 MiB    490.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    490.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    490.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    490.9 MiB    490.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    490.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    491.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    491.1 MiB    491.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    491.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    491.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    491.2 MiB    491.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    491.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    491.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    491.2 MiB    491.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    491.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    491.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    491.2 MiB    491.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    491.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    491.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    491.4 MiB    491.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    491.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    491.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    491.7 MiB    491.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    491.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    492.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    492.1 MiB    492.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    492.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    492.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    492.7 MiB    492.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    492.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    492.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    492.8 MiB    492.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    492.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    493.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    493.5 MiB    493.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    493.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    493.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    493.5 MiB    493.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    493.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    493.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    493.6 MiB    493.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    493.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    493.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    493.7 MiB    493.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    493.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    494.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    494.0 MiB    494.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    494.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    494.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    494.0 MiB    494.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    494.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    494.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    494.2 MiB    494.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    494.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    494.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    494.3 MiB    494.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    494.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    495.2 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    495.2 MiB    495.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    495.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    495.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    495.7 MiB    495.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    495.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    496.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    496.3 MiB    496.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    496.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    496.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    496.8 MiB    496.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    496.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    496.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    496.9 MiB    496.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    496.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    497.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    497.0 MiB    497.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    497.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    497.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    497.0 MiB    497.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    497.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    497.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


<keras.engine.sequential.Sequential object at 0x0000022E3F7343D0>
Loading time for LSTM (dataset sundaram_factors, range TR2): 0.030006885528564453
Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    497.5 MiB    497.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    497.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.1 MiB    498.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.8 MiB    498.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.1 MiB    499.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.2 MiB    499.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.3 MiB    499.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.4 MiB    499.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.3 MiB     -1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.3 MiB    498.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.4 MiB    498.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.4 MiB    498.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.4 MiB    498.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.4 MiB    498.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.5 MiB    498.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.5 MiB    498.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.5 MiB    498.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.7 MiB    498.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.7 MiB    498.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.7 MiB    498.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.7 MiB    498.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.8 MiB    498.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.8 MiB    498.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.8 MiB    498.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    498.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    498.9 MiB    498.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    498.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.1 MiB    499.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.2 MiB    499.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.2 MiB    499.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.6 MiB    499.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.6 MiB    499.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.6 MiB    499.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    499.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    499.6 MiB    499.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    499.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    500.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    500.1 MiB    500.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    500.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    500.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    500.5 MiB    500.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    500.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    500.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    500.5 MiB    500.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    500.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    500.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    500.9 MiB    500.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    500.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    500.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    500.9 MiB    500.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    500.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.1 MiB    501.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.1 MiB    501.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.1 MiB    501.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.2 MiB    501.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.3 MiB    501.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.7 MiB    501.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    501.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    501.9 MiB    501.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    501.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    502.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    502.7 MiB    502.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    502.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    502.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    502.7 MiB    502.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    502.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    502.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    502.7 MiB    502.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    502.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    503.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    503.0 MiB    503.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    503.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    503.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    503.0 MiB    503.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    503.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    503.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    503.0 MiB    503.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    503.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    503.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    503.4 MiB    503.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    503.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    503.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    503.7 MiB    503.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    503.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    503.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    503.8 MiB    503.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    503.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    504.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    504.3 MiB    504.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    504.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    504.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    504.9 MiB    504.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    504.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    504.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    504.9 MiB    504.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    504.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    504.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    504.9 MiB    504.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    504.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    504.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    504.9 MiB    504.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    504.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    505.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    505.2 MiB    505.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    505.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    505.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    505.3 MiB    505.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    505.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    505.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    505.9 MiB    505.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    505.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    505.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    505.9 MiB    505.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    505.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    506.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    506.1 MiB    506.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    506.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    506.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    506.5 MiB    506.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    506.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    506.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    506.5 MiB    506.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    506.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    506.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    506.5 MiB    506.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    506.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    506.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    506.5 MiB    506.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    506.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    506.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    506.9 MiB    506.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    506.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    507.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    507.1 MiB    507.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    507.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    507.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    507.4 MiB    507.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    507.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    508.2 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    508.2 MiB    508.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    508.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    509.2 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    509.2 MiB    509.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    509.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    509.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    509.5 MiB    509.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    509.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    509.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    509.6 MiB    509.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    509.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    509.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    509.7 MiB    509.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    509.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    510.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    510.0 MiB    510.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    510.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    510.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    510.0 MiB    510.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    510.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    510.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    510.8 MiB    510.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    510.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    510.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    510.8 MiB    510.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    510.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    511.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    511.0 MiB    511.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    511.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    511.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    511.3 MiB    511.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    511.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    511.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    511.5 MiB    511.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    511.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    512.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    512.2 MiB    512.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    512.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    512.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    512.8 MiB    512.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    512.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    512.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    512.8 MiB    512.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    512.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    512.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    512.9 MiB    512.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    512.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    512.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    512.9 MiB    512.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    512.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    513.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    513.2 MiB    513.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    513.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    513.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    513.2 MiB    513.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    513.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    513.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    513.2 MiB    513.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    513.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    513.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    513.3 MiB    513.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    513.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    513.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    513.5 MiB    513.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    513.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.1 MiB    514.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.2 MiB    514.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.3 MiB    514.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.3 MiB    514.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.3 MiB    514.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.3 MiB    514.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.3 MiB    514.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.3 MiB    514.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    514.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    514.9 MiB    514.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    514.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    515.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    515.2 MiB    515.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    515.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    515.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    515.4 MiB    515.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    515.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    515.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    515.7 MiB    515.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    515.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    515.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    515.8 MiB    515.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    515.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    516.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    516.0 MiB    516.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    516.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    516.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    516.0 MiB    516.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    516.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    516.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    516.5 MiB    516.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    516.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    517.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    517.0 MiB    517.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    517.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    517.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    517.0 MiB    517.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    517.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    517.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    517.6 MiB    517.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    517.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    517.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    517.6 MiB    517.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    517.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.2 MiB    518.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.8 MiB    518.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.8 MiB    518.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.8 MiB    518.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.8 MiB    518.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.8 MiB    518.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    518.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    518.8 MiB    518.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    518.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    519.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    519.1 MiB    519.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    519.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.0 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.0 MiB    520.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.1 MiB    520.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.5 MiB    520.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.6 MiB    520.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.6 MiB    520.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.6 MiB    520.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.6 MiB    520.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    520.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    520.9 MiB    520.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    520.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    521.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    521.4 MiB    521.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    521.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    521.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    521.7 MiB    521.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    521.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    522.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    522.1 MiB    522.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    522.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    522.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    522.4 MiB    522.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    522.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    522.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    522.6 MiB    522.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    522.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    522.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    522.9 MiB    522.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    522.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    522.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    522.9 MiB    522.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    522.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    522.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    522.9 MiB    522.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    522.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    523.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    523.1 MiB    523.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    523.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    523.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    523.3 MiB    523.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    523.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    523.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    523.5 MiB    523.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    523.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    523.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    523.5 MiB    523.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    523.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    524.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    524.0 MiB    524.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    524.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    524.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    524.1 MiB    524.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    524.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    524.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    524.2 MiB    524.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    524.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    525.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    525.1 MiB    525.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    525.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    525.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    525.2 MiB    525.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    525.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    525.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    525.2 MiB    525.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    525.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    525.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    525.3 MiB    525.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    525.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    525.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    525.4 MiB    525.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    525.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    525.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    525.7 MiB    525.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    525.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    526.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    526.3 MiB    526.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    526.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    526.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    526.5 MiB    526.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    526.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    527.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    527.1 MiB    527.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    527.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    527.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    527.6 MiB    527.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    527.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    527.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    527.8 MiB    527.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    527.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    528.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    528.2 MiB    528.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    528.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    528.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    528.3 MiB    528.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    528.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    528.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    528.3 MiB    528.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    528.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    528.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    528.3 MiB    528.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    528.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    528.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    528.5 MiB    528.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    528.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    529.5 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    529.5 MiB    529.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    529.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    529.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    529.6 MiB    529.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    529.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.5 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.5 MiB    530.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.5 MiB    530.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.7 MiB    530.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.8 MiB    530.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.8 MiB    530.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.8 MiB    530.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.8 MiB    530.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    530.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    530.8 MiB    530.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    530.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    531.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    531.5 MiB    531.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    531.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    531.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    531.9 MiB    531.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    531.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    532.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    532.1 MiB    532.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    532.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    532.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    532.6 MiB    532.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    532.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    532.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    532.9 MiB    532.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    532.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    532.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    532.9 MiB    532.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    532.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    532.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    532.9 MiB    532.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    532.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    533.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    533.1 MiB    533.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    533.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    533.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    533.2 MiB    533.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    533.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    533.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    533.4 MiB    533.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    533.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    534.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    534.0 MiB    534.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    534.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    534.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    534.2 MiB    534.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    534.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    534.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    534.3 MiB    534.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    534.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    535.2 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    535.2 MiB    535.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    535.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    535.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    535.6 MiB    535.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    535.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    535.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    535.6 MiB    535.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    535.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    535.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    535.6 MiB    535.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    535.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    535.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    535.6 MiB    535.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    535.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    535.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    535.9 MiB    535.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    535.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    536.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    536.2 MiB    536.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    536.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    536.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    536.4 MiB    536.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    536.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    536.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    536.9 MiB    536.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    536.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    537.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    537.3 MiB    537.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    537.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    537.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    537.8 MiB    537.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    537.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.0 MiB    538.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.2 MiB    538.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.2 MiB    538.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.3 MiB    538.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.3 MiB    538.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.3 MiB    538.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    538.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    538.8 MiB    538.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    538.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    539.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    539.4 MiB    539.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    539.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    539.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    539.6 MiB    539.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    539.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    539.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    539.9 MiB    539.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    539.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    540.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    540.1 MiB    540.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    540.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    540.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    540.4 MiB    540.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    540.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    540.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    540.4 MiB    540.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    540.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    540.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    540.4 MiB    540.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    540.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    540.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    540.4 MiB    540.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    540.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    540.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    540.8 MiB    540.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    540.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    541.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    541.1 MiB    541.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    541.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    541.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    541.4 MiB    541.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    541.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    541.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    541.9 MiB    541.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    541.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    541.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    541.9 MiB    541.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    541.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    542.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    542.3 MiB    542.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    542.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    542.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    542.4 MiB    542.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    542.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    542.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    542.5 MiB    542.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    542.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    542.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    542.5 MiB    542.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    542.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    542.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    542.8 MiB    542.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    542.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    543.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    543.1 MiB    543.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    543.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    543.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    543.7 MiB    543.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    543.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    543.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    543.7 MiB    543.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    543.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    544.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    544.4 MiB    544.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    544.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    544.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    544.5 MiB    544.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    544.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    545.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    545.0 MiB    545.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    545.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    545.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    545.0 MiB    545.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    545.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    545.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    545.2 MiB    545.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    545.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    545.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    545.5 MiB    545.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    545.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    545.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    545.6 MiB    545.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    545.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    546.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    546.2 MiB    546.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    546.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    546.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    546.3 MiB    546.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    546.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    546.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    546.9 MiB    546.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    546.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    547.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    547.1 MiB    547.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    547.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    547.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    547.4 MiB    547.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    547.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    547.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    547.8 MiB    547.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    547.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    547.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    547.8 MiB    547.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    547.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    547.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    547.8 MiB    547.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    547.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    547.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    547.9 MiB    547.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    547.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    548.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    548.3 MiB    548.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    548.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    548.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    548.7 MiB    548.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    548.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    549.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    549.0 MiB    549.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    549.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    549.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    549.2 MiB    549.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    549.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    549.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    549.5 MiB    549.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    549.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    550.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    550.0 MiB    550.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    550.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    550.9 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    550.9 MiB    550.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    550.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    551.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    551.0 MiB    551.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    551.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    551.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    551.0 MiB    551.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    551.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    551.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    551.0 MiB    551.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    551.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    551.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    551.1 MiB    551.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    551.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    551.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    551.2 MiB    551.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    551.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    551.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    551.6 MiB    551.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    551.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    552.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    552.4 MiB    552.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    552.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    552.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    552.6 MiB    552.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    552.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.4 MiB    553.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.6 MiB    553.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.6 MiB    553.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.6 MiB    553.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.8 MiB    553.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.8 MiB    553.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    553.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    553.8 MiB    553.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    553.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    554.8 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    554.8 MiB    554.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    554.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    554.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    554.9 MiB    554.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    554.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    554.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    554.9 MiB    554.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    554.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    555.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    555.0 MiB    555.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    555.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    555.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    555.1 MiB    555.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    555.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    555.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    555.2 MiB    555.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    555.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    555.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    555.5 MiB    555.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    555.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    555.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    555.6 MiB    555.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    555.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    556.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    556.1 MiB    556.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    556.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    556.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    556.5 MiB    556.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    556.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    556.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    556.7 MiB    556.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    556.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    557.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    557.0 MiB    557.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    557.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    557.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    557.4 MiB    557.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    557.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.1 MiB    558.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.3 MiB    558.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.3 MiB    558.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.3 MiB    558.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.3 MiB    558.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.7 MiB    558.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.8 MiB    558.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    558.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    558.9 MiB    558.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    558.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    559.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    559.3 MiB    559.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    559.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    559.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    559.7 MiB    559.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    559.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    560.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    560.2 MiB    560.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    560.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    561.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    561.0 MiB    561.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    561.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    561.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    561.2 MiB    561.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    561.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    561.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    561.4 MiB    561.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    561.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    561.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    561.7 MiB    561.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    561.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    561.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    561.7 MiB    561.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    561.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    561.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    561.8 MiB    561.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    561.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    562.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    562.0 MiB    562.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    562.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    562.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    562.7 MiB    562.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    562.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    563.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    563.2 MiB    563.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    563.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    563.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    563.7 MiB    563.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    563.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    563.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    563.8 MiB    563.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    563.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    564.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    564.0 MiB    564.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    564.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    564.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    564.2 MiB    564.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    564.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    564.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    564.3 MiB    564.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    564.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    564.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    564.3 MiB    564.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    564.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    564.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    564.3 MiB    564.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    564.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    564.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    564.8 MiB    564.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    564.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    565.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    565.2 MiB    565.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    565.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    565.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    565.3 MiB    565.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    565.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    565.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    565.5 MiB    565.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    565.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.1 MiB    566.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.2 MiB    566.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.2 MiB    566.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.2 MiB    566.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.3 MiB    566.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.3 MiB    566.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    566.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    566.7 MiB    566.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    566.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    567.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    567.2 MiB    567.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    567.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    568.1 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    568.1 MiB    568.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    568.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    568.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    568.3 MiB    568.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    568.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    568.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    568.9 MiB    568.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    568.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    568.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    568.9 MiB    568.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    568.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    568.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    568.9 MiB    568.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    568.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    568.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    568.9 MiB    568.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    568.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    569.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    569.1 MiB    569.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    569.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    569.8 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    569.8 MiB    569.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    569.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    569.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    569.8 MiB    569.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    569.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    570.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    570.1 MiB    570.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    570.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    570.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    570.6 MiB    570.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    570.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    570.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    570.8 MiB    570.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    570.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    571.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    571.6 MiB    571.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    571.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    571.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    571.9 MiB    571.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    571.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    571.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    571.9 MiB    571.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    571.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    571.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    571.9 MiB    571.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    571.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    571.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    571.9 MiB    571.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    571.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    572.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    572.1 MiB    572.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    572.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    572.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    572.1 MiB    572.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    572.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    572.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    572.5 MiB    572.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    572.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    572.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    572.9 MiB    572.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    572.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.4 MiB    573.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.4 MiB    573.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.4 MiB    573.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.4 MiB    573.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.4 MiB    573.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.7 MiB    573.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    573.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    573.9 MiB    573.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    573.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    574.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    574.0 MiB    574.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    574.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    574.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    574.2 MiB    574.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    574.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    574.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    574.4 MiB    574.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    574.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    575.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    575.0 MiB    575.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    575.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    575.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    575.8 MiB    575.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    575.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    576.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    576.0 MiB    576.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    576.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    576.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    576.0 MiB    576.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    576.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    576.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    576.0 MiB    576.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    576.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    576.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    576.0 MiB    576.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    576.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    576.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    576.3 MiB    576.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    576.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    576.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    576.3 MiB    576.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    576.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    577.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    577.1 MiB    577.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    577.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    577.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    577.9 MiB    577.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    577.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.4 MiB    578.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.4 MiB    578.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.5 MiB    578.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.5 MiB    578.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.5 MiB    578.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.6 MiB    578.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    578.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    578.7 MiB    578.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    578.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    579.5 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    579.5 MiB    579.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    579.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    579.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    579.5 MiB    579.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    579.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    579.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    579.6 MiB    579.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    579.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    579.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    579.9 MiB    579.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    579.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    581.5 MiB      1.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    581.5 MiB    581.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    581.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    581.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    581.5 MiB    581.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    581.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    581.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    581.5 MiB    581.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    581.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    581.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    581.5 MiB    581.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    581.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    581.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    581.8 MiB    581.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    581.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    582.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    582.1 MiB    582.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    582.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    582.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    582.2 MiB    582.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    582.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    582.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    582.7 MiB    582.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    582.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    582.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    582.8 MiB    582.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    582.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.2 MiB    583.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.5 MiB    583.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.5 MiB    583.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.5 MiB    583.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.5 MiB    583.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.5 MiB    583.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    583.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    583.7 MiB    583.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    583.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    584.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    584.3 MiB    584.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    584.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    584.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    584.6 MiB    584.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    584.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    584.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    584.6 MiB    584.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    584.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    585.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    585.2 MiB    585.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    585.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    585.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    585.3 MiB    585.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    585.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    585.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    585.6 MiB    585.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    585.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    585.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    585.6 MiB    585.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    585.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    585.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    585.6 MiB    585.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    585.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    585.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    585.6 MiB    585.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    585.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    586.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    586.0 MiB    586.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    586.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    586.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    586.7 MiB    586.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    586.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    587.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    587.3 MiB    587.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    587.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    588.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    588.0 MiB    588.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    588.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    588.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    588.3 MiB    588.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    588.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    588.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    588.9 MiB    588.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    588.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.0 MiB    589.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.0 MiB    589.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.5 MiB    589.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.5 MiB    589.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.8 MiB    589.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.8 MiB    589.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    589.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    589.8 MiB    589.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    589.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    590.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    590.4 MiB    590.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    590.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    590.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    590.8 MiB    590.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    590.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.6 MiB    591.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.6 MiB    591.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.6 MiB    591.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.6 MiB    591.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.9 MiB    591.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.9 MiB    591.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    591.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    591.9 MiB    591.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    591.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.0 MiB    592.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.1 MiB    592.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.1 MiB    592.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.4 MiB    592.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.4 MiB    592.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.7 MiB    592.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    592.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    592.7 MiB    592.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    592.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    593.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    593.3 MiB    593.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    593.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    593.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    593.4 MiB    593.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    593.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    593.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    593.8 MiB    593.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    593.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    594.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    594.1 MiB    594.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    594.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    594.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    594.2 MiB    594.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    594.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    594.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    594.9 MiB    594.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    594.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    595.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    595.2 MiB    595.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    595.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    595.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    595.2 MiB    595.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    595.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    595.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    595.2 MiB    595.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    595.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    595.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    595.2 MiB    595.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    595.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    595.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    595.2 MiB    595.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    595.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    595.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    595.7 MiB    595.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    595.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    596.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    596.4 MiB    596.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    596.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    597.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    597.0 MiB    597.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    597.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    597.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    597.0 MiB    597.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    597.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    597.8 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    597.8 MiB    597.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    597.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    597.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    597.9 MiB    597.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    597.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    598.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    598.2 MiB    598.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    598.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    598.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    598.2 MiB    598.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    598.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    598.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    598.3 MiB    598.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    598.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    598.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    598.5 MiB    598.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    598.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    598.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    598.5 MiB    598.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    598.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    599.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    599.0 MiB    599.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    599.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    599.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    599.0 MiB    599.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    599.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    599.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    599.7 MiB    599.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    599.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    599.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    599.8 MiB    599.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    599.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    599.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    599.8 MiB    599.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    599.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    600.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    600.2 MiB    600.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    600.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    600.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    600.3 MiB    600.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    600.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    600.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    600.3 MiB    600.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    600.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    600.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    600.7 MiB    600.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    600.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    601.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    601.2 MiB    601.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    601.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    601.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    601.7 MiB    601.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    601.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    601.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    601.9 MiB    601.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    601.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    602.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    602.0 MiB    602.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    602.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    602.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    602.2 MiB    602.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    602.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    602.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    602.8 MiB    602.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    602.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    602.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    602.9 MiB    602.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    602.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    602.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    602.9 MiB    602.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    602.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    603.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    603.0 MiB    603.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    603.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    603.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    603.0 MiB    603.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    603.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    603.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    603.0 MiB    603.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    603.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    603.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    603.6 MiB    603.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    603.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    603.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    603.9 MiB    603.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    603.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    604.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    604.2 MiB    604.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    604.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    604.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    604.4 MiB    604.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    604.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    605.3 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    605.3 MiB    605.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    605.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    605.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    605.4 MiB    605.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    605.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    605.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    605.4 MiB    605.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    605.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    605.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    605.4 MiB    605.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    605.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    605.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    605.9 MiB    605.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    605.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    606.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    606.3 MiB    606.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    606.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    606.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    606.5 MiB    606.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    606.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    606.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    606.5 MiB    606.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    606.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    606.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    606.8 MiB    606.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    606.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    607.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    607.3 MiB    607.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    607.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    607.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    607.6 MiB    607.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    607.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    607.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    607.9 MiB    607.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    607.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    607.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    607.9 MiB    607.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    607.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    608.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    608.1 MiB    608.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    608.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    608.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    608.5 MiB    608.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    608.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    608.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    608.5 MiB    608.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    608.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    608.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    608.7 MiB    608.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    608.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    608.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    608.8 MiB    608.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    608.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    609.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    609.0 MiB    609.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    609.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    609.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    609.1 MiB    609.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    609.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    609.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    609.6 MiB    609.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    609.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    609.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    609.7 MiB    609.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    609.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    609.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    609.7 MiB    609.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    609.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    609.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    609.7 MiB    609.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    609.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    610.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    610.3 MiB    610.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    610.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    610.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    610.7 MiB    610.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    610.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    611.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    611.0 MiB    611.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    611.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    611.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    611.4 MiB    611.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    611.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    611.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    611.9 MiB    611.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    611.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.0 MiB    612.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.3 MiB    612.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.4 MiB    612.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.4 MiB    612.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.5 MiB    612.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.8 MiB    612.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    612.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    612.9 MiB    612.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    612.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    613.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    613.3 MiB    613.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    613.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    614.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    614.0 MiB    614.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    614.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    614.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    614.0 MiB    614.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    614.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    614.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


<keras.engine.sequential.Sequential object at 0x0000022E4398BD90>
Loading time for LSTM (dataset sundaram_factors, range TR3): 0.024003982543945312
Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    614.9 MiB    614.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    614.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    614.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    614.9 MiB    614.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    614.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    615.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    615.0 MiB    615.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    615.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    615.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    615.0 MiB    615.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    615.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    615.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    615.3 MiB    615.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    615.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    615.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    615.3 MiB    615.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    615.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    615.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    615.3 MiB    615.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    615.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    616.4 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    616.4 MiB    616.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    616.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    617.2 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    617.2 MiB    617.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    617.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    617.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    617.6 MiB    617.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    617.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    617.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    617.7 MiB    617.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    617.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    618.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    618.2 MiB    618.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    618.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    618.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    618.3 MiB    618.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    618.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    618.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    618.5 MiB    618.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    618.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    618.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    618.7 MiB    618.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    618.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    619.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    619.1 MiB    619.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    619.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    619.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    619.5 MiB    619.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    619.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    619.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    619.9 MiB    619.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    619.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    620.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    620.1 MiB    620.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    620.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    621.0 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    621.0 MiB    621.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    621.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    621.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    621.1 MiB    621.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    621.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    621.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    621.1 MiB    621.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    621.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    621.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    621.3 MiB    621.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    621.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    621.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    621.4 MiB    621.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    621.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    621.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    621.8 MiB    621.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    621.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    622.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    622.0 MiB    622.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    622.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    622.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    622.7 MiB    622.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    622.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.2 MiB    623.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.6 MiB    623.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.9 MiB    623.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.9 MiB    623.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.9 MiB    623.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.9 MiB    623.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    623.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    623.9 MiB    623.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    623.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    624.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    624.2 MiB    624.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    624.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    624.9 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    624.9 MiB    624.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    624.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    625.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    625.0 MiB    625.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    625.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    625.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    625.2 MiB    625.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    625.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    625.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    625.4 MiB    625.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    625.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    625.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    625.8 MiB    625.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    625.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    626.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    626.0 MiB    626.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    626.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    626.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    626.2 MiB    626.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    626.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    626.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    626.3 MiB    626.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    626.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    627.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    627.0 MiB    627.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    627.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    627.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    627.4 MiB    627.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    627.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    627.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    627.5 MiB    627.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    627.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    628.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    628.1 MiB    628.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    628.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    628.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    628.8 MiB    628.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    628.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    629.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    629.1 MiB    629.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    629.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    629.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    629.4 MiB    629.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    629.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    629.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    629.5 MiB    629.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    629.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    629.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    629.6 MiB    629.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    629.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    629.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    629.8 MiB    629.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    629.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    630.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    630.0 MiB    630.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    630.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    630.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    630.2 MiB    630.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    630.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    630.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    630.7 MiB    630.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    630.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    630.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    630.8 MiB    630.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    630.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    631.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    631.4 MiB    631.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    631.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    632.2 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    632.2 MiB    632.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    632.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    633.2 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    633.2 MiB    633.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    633.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    633.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    633.3 MiB    633.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    633.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    633.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    633.4 MiB    633.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    633.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    633.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    633.4 MiB    633.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    633.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    633.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    633.5 MiB    633.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    633.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    633.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    633.6 MiB    633.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    633.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    634.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    634.3 MiB    634.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    634.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    634.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    634.4 MiB    634.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    634.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    634.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    634.7 MiB    634.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    634.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    635.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    635.2 MiB    635.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    635.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    635.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    635.7 MiB    635.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    635.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    635.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    635.8 MiB    635.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    635.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    635.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    635.8 MiB    635.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    635.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    635.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    635.9 MiB    635.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    635.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    636.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    636.0 MiB    636.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    636.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    636.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    636.0 MiB    636.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    636.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    636.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    636.1 MiB    636.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    636.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    636.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    636.6 MiB    636.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    636.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    636.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    636.8 MiB    636.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    636.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    637.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    637.3 MiB    637.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    637.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.0 MiB    638.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.1 MiB    638.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.1 MiB    638.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.1 MiB    638.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.2 MiB    638.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.4 MiB    638.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    638.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    638.7 MiB    638.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    638.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    639.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    639.1 MiB    639.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    639.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    639.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    639.9 MiB    639.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    639.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    639.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    639.9 MiB    639.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    639.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    640.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    640.7 MiB    640.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    640.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    640.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    640.8 MiB    640.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    640.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    640.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    640.8 MiB    640.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    640.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    640.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    640.8 MiB    640.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    640.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    640.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    640.8 MiB    640.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    640.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    640.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    640.9 MiB    640.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    640.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    641.8 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    641.8 MiB    641.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    641.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    642.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    642.0 MiB    642.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    642.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    642.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    642.3 MiB    642.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    642.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    642.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    642.5 MiB    642.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    642.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.3 MiB    643.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.4 MiB    643.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.4 MiB    643.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.4 MiB    643.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.4 MiB    643.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.4 MiB    643.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.6 MiB    643.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    643.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    643.8 MiB    643.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    643.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    644.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    644.1 MiB    644.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    644.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    644.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    644.4 MiB    644.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    644.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    644.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    644.7 MiB    644.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    644.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    644.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    644.7 MiB    644.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    644.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    644.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    644.8 MiB    644.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    644.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    645.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    645.0 MiB    645.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    645.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    645.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    645.2 MiB    645.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    645.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    645.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    645.2 MiB    645.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    645.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    645.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    645.6 MiB    645.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    645.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    645.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    645.8 MiB    645.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    645.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    645.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    645.9 MiB    645.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    645.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    646.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    646.2 MiB    646.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    646.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    646.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    646.6 MiB    646.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    646.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    646.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    646.7 MiB    646.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    646.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    646.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    646.7 MiB    646.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    646.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    647.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    647.2 MiB    647.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    647.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    647.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    647.4 MiB    647.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    647.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    647.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    647.6 MiB    647.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    647.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    647.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    647.7 MiB    647.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    647.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    648.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    648.1 MiB    648.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    648.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    649.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    649.0 MiB    649.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    649.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    649.6 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    649.6 MiB    649.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    649.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    649.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    649.8 MiB    649.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    649.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    649.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    649.8 MiB    649.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    649.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    649.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    649.8 MiB    649.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    649.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    650.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    650.0 MiB    650.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    650.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    650.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    650.0 MiB    650.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    650.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    650.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    650.5 MiB    650.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    650.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    651.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    651.2 MiB    651.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    651.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    651.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    651.3 MiB    651.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    651.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    651.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    651.5 MiB    651.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    651.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    651.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    651.8 MiB    651.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    651.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.4 MiB    652.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.4 MiB    652.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.4 MiB    652.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.4 MiB    652.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.6 MiB    652.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.6 MiB    652.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    652.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    652.7 MiB    652.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    652.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    653.5 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    653.5 MiB    653.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    653.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    654.4 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    654.4 MiB    654.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    654.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    654.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    654.7 MiB    654.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    654.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    654.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    654.8 MiB    654.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    654.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    654.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    654.8 MiB    654.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    654.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    654.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    654.8 MiB    654.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    654.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    654.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    654.8 MiB    654.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    654.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    655.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    655.1 MiB    655.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    655.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    655.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    655.3 MiB    655.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    655.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    655.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    655.5 MiB    655.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    655.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    656.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    656.2 MiB    656.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    656.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    656.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    656.5 MiB    656.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    656.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    656.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    656.5 MiB    656.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    656.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    657.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    657.3 MiB    657.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    657.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    657.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    657.5 MiB    657.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    657.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    657.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    657.5 MiB    657.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    657.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    657.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    657.5 MiB    657.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    657.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    657.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    657.8 MiB    657.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    657.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    658.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    658.4 MiB    658.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    658.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    658.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    658.7 MiB    658.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    658.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    659.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    659.1 MiB    659.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    659.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    659.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    659.9 MiB    659.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    659.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    660.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    660.5 MiB    660.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    660.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    660.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    660.7 MiB    660.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    660.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    660.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    660.7 MiB    660.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    660.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    660.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    660.7 MiB    660.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    660.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    660.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    660.7 MiB    660.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    660.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    660.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    660.7 MiB    660.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    660.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    661.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    661.1 MiB    661.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    661.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    661.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    661.6 MiB    661.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    661.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    661.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    661.9 MiB    661.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    661.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    662.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    662.4 MiB    662.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    662.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.0 MiB    663.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.2 MiB    663.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.5 MiB    663.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.6 MiB    663.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.7 MiB    663.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.9 MiB    663.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    663.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    663.9 MiB    663.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    663.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    664.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    664.0 MiB    664.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    664.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    664.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    664.3 MiB    664.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    664.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    664.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    664.8 MiB    664.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    664.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    665.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    665.2 MiB    665.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    665.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    665.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    665.7 MiB    665.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    665.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    665.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    665.8 MiB    665.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    665.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    665.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    665.8 MiB    665.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    665.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    665.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    665.8 MiB    665.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    665.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    666.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    666.0 MiB    666.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    666.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    666.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    666.4 MiB    666.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    666.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.0 MiB    667.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.0 MiB    667.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.3 MiB    667.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.3 MiB    667.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.5 MiB    667.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.7 MiB    667.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.7 MiB    667.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.8 MiB    667.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    667.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    667.9 MiB    667.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    667.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    668.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    668.4 MiB    668.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    668.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    668.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    668.5 MiB    668.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    668.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    669.4 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    669.4 MiB    669.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    669.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    669.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    669.7 MiB    669.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    669.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    670.8 MiB      1.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    670.8 MiB    670.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    670.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    671.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    671.0 MiB    671.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    671.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    671.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    671.2 MiB    671.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    671.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    671.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    671.2 MiB    671.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    671.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    671.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    671.3 MiB    671.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    671.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    671.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    671.6 MiB    671.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    671.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    672.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    672.2 MiB    672.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    672.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    673.1 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    673.1 MiB    673.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    673.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    673.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    673.5 MiB    673.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    673.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    673.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    673.8 MiB    673.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    673.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    673.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    673.8 MiB    673.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    673.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.6 MiB    674.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.6 MiB    674.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.6 MiB    674.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.7 MiB    674.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.8 MiB    674.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.8 MiB    674.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    674.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    674.9 MiB    674.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    674.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    675.8 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    675.8 MiB    675.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    675.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.2 MiB    676.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.2 MiB    676.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.4 MiB    676.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.5 MiB    676.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.5 MiB    676.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.5 MiB    676.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    676.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    676.7 MiB    676.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    676.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    677.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    677.0 MiB    677.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    677.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    677.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    677.7 MiB    677.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    677.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    678.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    678.0 MiB    678.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    678.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    678.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    678.0 MiB    678.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    678.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    678.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    678.7 MiB    678.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    678.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    679.5 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    679.5 MiB    679.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    679.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    679.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    679.5 MiB    679.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    679.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    679.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    679.5 MiB    679.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    679.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    679.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    679.5 MiB    679.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    679.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    679.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    679.5 MiB    679.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    679.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    680.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    680.1 MiB    680.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    680.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    680.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    680.1 MiB    680.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    680.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    680.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    680.7 MiB    680.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    680.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.2 MiB    681.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.3 MiB    681.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.3 MiB    681.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.4 MiB    681.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.5 MiB    681.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.5 MiB    681.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.5 MiB    681.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    681.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    681.8 MiB    681.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    681.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    682.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    682.3 MiB    682.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    682.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    682.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    682.8 MiB    682.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    682.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    682.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    682.8 MiB    682.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    682.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    683.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    683.2 MiB    683.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    683.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    684.4 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    684.4 MiB    684.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    684.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    684.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    684.6 MiB    684.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    684.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    684.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    684.7 MiB    684.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    684.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    684.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    684.7 MiB    684.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    684.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    685.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    685.1 MiB    685.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    685.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    685.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    685.1 MiB    685.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    685.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    685.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    685.1 MiB    685.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    685.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    685.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    685.5 MiB    685.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    685.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    685.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    685.5 MiB    685.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    685.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    686.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    686.0 MiB    686.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    686.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    686.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    686.7 MiB    686.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    686.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    686.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    686.8 MiB    686.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    686.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    686.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    686.8 MiB    686.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    686.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    686.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    686.8 MiB    686.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    686.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    687.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    687.3 MiB    687.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    687.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    687.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    687.3 MiB    687.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    687.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    688.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    688.1 MiB    688.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    688.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    688.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    688.1 MiB    688.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    688.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    688.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    688.8 MiB    688.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    688.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    688.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    688.8 MiB    688.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    688.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    688.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    688.9 MiB    688.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    688.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    689.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    689.3 MiB    689.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    689.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    689.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    689.3 MiB    689.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    689.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    689.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    689.3 MiB    689.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    689.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    689.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    689.3 MiB    689.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    689.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    689.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    689.3 MiB    689.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    689.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    689.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    689.6 MiB    689.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    689.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    690.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    690.2 MiB    690.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    690.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    690.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    690.8 MiB    690.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    690.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    691.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    691.3 MiB    691.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    691.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    691.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    691.9 MiB    691.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    691.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    692.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    692.1 MiB    692.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    692.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    692.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    692.2 MiB    692.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    692.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    692.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    692.2 MiB    692.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    692.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    692.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    692.3 MiB    692.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    692.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    692.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    692.9 MiB    692.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    692.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    693.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    693.5 MiB    693.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    693.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    694.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    694.0 MiB    694.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    694.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    694.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    694.0 MiB    694.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    694.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    694.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    694.1 MiB    694.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    694.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    694.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    694.5 MiB    694.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    694.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.0 MiB    695.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.0 MiB    695.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.0 MiB    695.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.0 MiB    695.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.0 MiB    695.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.3 MiB    695.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.8 MiB    695.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    695.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    695.9 MiB    695.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    695.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    696.6 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    696.6 MiB    696.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    696.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    696.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    696.9 MiB    696.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    696.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    697.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    697.0 MiB    697.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    697.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    697.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    697.2 MiB    697.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    697.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    697.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    697.2 MiB    697.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    697.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    697.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    697.6 MiB    697.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    697.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    697.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    697.7 MiB    697.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    697.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    698.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    698.2 MiB    698.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    698.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    698.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    698.4 MiB    698.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    698.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    698.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    698.5 MiB    698.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    698.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    699.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    699.4 MiB    699.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    699.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    700.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    700.0 MiB    700.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    700.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    700.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    700.0 MiB    700.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    700.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    700.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    700.0 MiB    700.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    700.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    700.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    700.2 MiB    700.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    700.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    700.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    700.7 MiB    700.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    700.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    701.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    701.1 MiB    701.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    701.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    701.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    701.3 MiB    701.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    701.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    701.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    701.8 MiB    701.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    701.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    702.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    702.0 MiB    702.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    702.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    702.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    702.7 MiB    702.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    702.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    703.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    703.1 MiB    703.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    703.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    703.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    703.1 MiB    703.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    703.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    703.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    703.1 MiB    703.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    703.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    703.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    703.5 MiB    703.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    703.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    703.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    703.8 MiB    703.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    703.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    703.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    703.8 MiB    703.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    703.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    704.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    704.3 MiB    704.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    704.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    704.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    704.3 MiB    704.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    704.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    704.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    704.4 MiB    704.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    704.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    704.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    704.7 MiB    704.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    704.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.2 MiB    705.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.3 MiB    705.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.3 MiB    705.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.5 MiB    705.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.6 MiB    705.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.6 MiB    705.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.7 MiB    705.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    705.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    705.8 MiB    705.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    705.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    706.8 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    706.8 MiB    706.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    706.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    707.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    707.1 MiB    707.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    707.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    707.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    707.7 MiB    707.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    707.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    707.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    707.7 MiB    707.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    707.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    707.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    707.7 MiB    707.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    707.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    707.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    707.7 MiB    707.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    707.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    708.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    708.1 MiB    708.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    708.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    708.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    708.4 MiB    708.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    708.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    708.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    708.7 MiB    708.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    708.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    709.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    709.1 MiB    709.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    709.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    709.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    709.4 MiB    709.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    709.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    709.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    709.5 MiB    709.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    709.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    710.5 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    710.5 MiB    710.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    710.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    710.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    710.5 MiB    710.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    710.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    710.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    710.5 MiB    710.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    710.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    710.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    710.5 MiB    710.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    710.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    710.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    710.9 MiB    710.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    710.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    711.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    711.1 MiB    711.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    711.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    711.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    711.3 MiB    711.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    711.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    711.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    711.7 MiB    711.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    711.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    712.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    712.2 MiB    712.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    712.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    712.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    712.3 MiB    712.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    712.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    712.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    712.9 MiB    712.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    712.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    712.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    712.9 MiB    712.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    712.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    713.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    713.0 MiB    713.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    713.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    713.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    713.0 MiB    713.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    713.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    713.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    713.0 MiB    713.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    713.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    713.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    713.4 MiB    713.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    713.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    713.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    713.7 MiB    713.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    713.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    713.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    713.9 MiB    713.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    713.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    714.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    714.2 MiB    714.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    714.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    714.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    714.4 MiB    714.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    714.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    714.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    714.9 MiB    714.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    714.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    715.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    715.2 MiB    715.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    715.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    715.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    715.2 MiB    715.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    715.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    715.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    715.3 MiB    715.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    715.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    715.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    715.7 MiB    715.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    715.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    716.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    716.1 MiB    716.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    716.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    716.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    716.1 MiB    716.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    716.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    716.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    716.4 MiB    716.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    716.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.5 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.5 MiB    717.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.5 MiB    717.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.7 MiB    717.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.8 MiB    717.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.9 MiB    717.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.9 MiB    717.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    717.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    717.9 MiB    717.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    717.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    718.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    718.6 MiB    718.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    718.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    718.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    718.7 MiB    718.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    718.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    718.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    718.8 MiB    718.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    718.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    719.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    719.2 MiB    719.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    719.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    719.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    719.3 MiB    719.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    719.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    720.2 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    720.2 MiB    720.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    720.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    720.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    720.3 MiB    720.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    720.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    720.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    720.5 MiB    720.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    720.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    720.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    720.6 MiB    720.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    720.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    720.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    720.6 MiB    720.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    720.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    720.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    720.9 MiB    720.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    720.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    721.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    721.0 MiB    721.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    721.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    721.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    721.6 MiB    721.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    721.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    722.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    722.4 MiB    722.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    722.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    723.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    723.0 MiB    723.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    723.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    723.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    723.6 MiB    723.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    723.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    723.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    723.7 MiB    723.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    723.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    723.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    723.7 MiB    723.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    723.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    723.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    723.8 MiB    723.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    723.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    724.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    724.3 MiB    724.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    724.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    724.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    724.3 MiB    724.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    724.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    724.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    724.6 MiB    724.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    724.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    725.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    725.2 MiB    725.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    725.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    725.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    725.2 MiB    725.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    725.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    725.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    725.7 MiB    725.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    725.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.3 MiB    726.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.3 MiB    726.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.6 MiB    726.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.7 MiB    726.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.7 MiB    726.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.7 MiB    726.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    726.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    726.9 MiB    726.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    726.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    727.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    727.2 MiB    727.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    727.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    727.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    727.6 MiB    727.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    727.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    727.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    727.6 MiB    727.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    727.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    727.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    727.8 MiB    727.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    727.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    727.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    727.9 MiB    727.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    727.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    728.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    728.2 MiB    728.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    728.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    728.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    728.2 MiB    728.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    728.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    728.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    728.4 MiB    728.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    728.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    728.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    728.6 MiB    728.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    728.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    729.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    729.0 MiB    729.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    729.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    729.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    729.6 MiB    729.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    729.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    729.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    729.7 MiB    729.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    729.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    730.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    730.1 MiB    730.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    730.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    730.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    730.9 MiB    730.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    730.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    731.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    731.0 MiB    731.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    731.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    731.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    731.3 MiB    731.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    731.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    731.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    731.6 MiB    731.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    731.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    731.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    731.9 MiB    731.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    731.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    732.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    732.4 MiB    732.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    732.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    732.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    732.7 MiB    732.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    732.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    733.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    733.0 MiB    733.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    733.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    733.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    733.7 MiB    733.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    733.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    734.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    734.3 MiB    734.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    734.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    735.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    735.1 MiB    735.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    735.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    735.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    735.1 MiB    735.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    735.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    735.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    735.3 MiB    735.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    735.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    735.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    735.3 MiB    735.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    735.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    735.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    735.7 MiB    735.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    735.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    735.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    735.7 MiB    735.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    735.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.2 MiB    736.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.8 MiB    736.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.8 MiB    736.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.8 MiB    736.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.0 MiB      1.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.0 MiB    738.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.1 MiB    738.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB     -1.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.1 MiB    736.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.3 MiB    736.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.4 MiB    736.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.4 MiB    736.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.4 MiB    736.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.4 MiB    736.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.4 MiB    736.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.9 MiB    736.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.9 MiB    736.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.9 MiB    736.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.9 MiB    736.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.9 MiB    736.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    736.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    736.9 MiB    736.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    736.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.1 MiB    737.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.1 MiB    737.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.1 MiB    737.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.3 MiB    737.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.5 MiB    737.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.5 MiB    737.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.5 MiB    737.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.5 MiB    737.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    737.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    737.7 MiB    737.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    737.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


<keras.engine.sequential.Sequential object at 0x0000022E3C422290>
Loading time for LSTM (dataset sundaram_factors, range TR4): 0.029998064041137695
Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.5 MiB     -0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.5 MiB    738.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.7 MiB    738.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    738.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    738.7 MiB    738.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    738.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    739.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    739.0 MiB    739.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    739.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    739.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    739.0 MiB    739.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    739.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    739.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    739.5 MiB    739.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    739.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    739.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    739.9 MiB    739.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    739.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.3 MiB    740.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.5 MiB    740.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.5 MiB    740.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.5 MiB    740.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.5 MiB    740.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.8 MiB    740.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    740.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    740.9 MiB    740.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    740.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    741.9 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    741.9 MiB    741.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    741.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    742.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    742.1 MiB    742.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    742.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    742.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    742.2 MiB    742.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    742.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    742.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    742.5 MiB    742.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    742.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    742.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    742.5 MiB    742.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    742.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    742.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    742.5 MiB    742.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    742.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    742.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    742.5 MiB    742.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    742.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    743.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    743.3 MiB    743.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    743.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    743.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    743.3 MiB    743.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    743.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    743.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    743.3 MiB    743.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    743.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    743.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    743.6 MiB    743.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    743.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    743.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    743.9 MiB    743.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    743.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.6 MiB    744.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.6 MiB    744.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.6 MiB    744.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.6 MiB    744.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.6 MiB    744.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.6 MiB    744.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    744.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    744.7 MiB    744.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    744.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    745.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    745.1 MiB    745.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    745.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    745.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    745.6 MiB    745.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    745.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    745.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    745.7 MiB    745.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    745.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.1 MiB    746.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.5 MiB    746.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.5 MiB    746.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.6 MiB    746.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.6 MiB    746.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.6 MiB    746.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.8 MiB    746.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    746.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    746.9 MiB    746.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    746.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.0 MiB    747.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.1 MiB    747.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.4 MiB    747.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.9 MiB    747.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.9 MiB    747.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.9 MiB    747.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.9 MiB    747.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    747.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    747.9 MiB    747.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    747.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    748.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    748.1 MiB    748.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    748.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    748.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    748.4 MiB    748.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    748.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.0 MiB    749.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.3 MiB    749.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.5 MiB    749.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.5 MiB    749.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.8 MiB    749.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.8 MiB    749.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    749.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    749.8 MiB    749.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    749.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    750.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    750.1 MiB    750.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    750.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    750.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    750.4 MiB    750.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    750.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    750.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    750.6 MiB    750.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    750.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    750.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    750.7 MiB    750.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    750.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    750.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    750.9 MiB    750.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    750.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    751.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    751.4 MiB    751.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    751.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    751.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    751.4 MiB    751.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    751.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    751.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    751.5 MiB    751.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    751.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    751.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    751.5 MiB    751.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    751.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    751.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    751.6 MiB    751.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    751.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    751.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    751.6 MiB    751.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    751.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    752.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    752.3 MiB    752.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    752.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    752.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    752.4 MiB    752.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    752.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    752.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    752.8 MiB    752.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    752.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    752.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    752.9 MiB    752.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    752.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    753.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    753.3 MiB    753.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    753.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    753.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    753.9 MiB    753.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    753.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    753.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    753.9 MiB    753.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    753.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    753.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    753.9 MiB    753.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    753.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    753.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    753.9 MiB    753.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    753.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    753.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    753.9 MiB    753.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    753.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    754.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    754.2 MiB    754.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    754.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    754.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    754.2 MiB    754.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    754.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    754.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    754.4 MiB    754.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    754.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    754.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    754.6 MiB    754.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    754.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    754.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    754.9 MiB    754.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    754.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    755.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    755.4 MiB    755.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    755.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    755.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    755.5 MiB    755.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    755.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    755.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    755.6 MiB    755.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    755.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    755.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    755.8 MiB    755.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    755.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    755.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    755.8 MiB    755.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    755.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    756.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    756.1 MiB    756.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    756.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    756.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    756.5 MiB    756.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    756.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    757.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    757.3 MiB    757.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    757.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    757.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    757.6 MiB    757.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    757.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    757.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    757.8 MiB    757.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    757.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    757.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    757.9 MiB    757.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    757.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    757.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    757.9 MiB    757.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    757.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    758.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    758.1 MiB    758.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    758.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    758.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    758.2 MiB    758.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    758.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    758.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    758.6 MiB    758.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    758.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    758.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    758.6 MiB    758.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    758.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    758.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    758.7 MiB    758.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    758.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.0 MiB    759.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.2 MiB    759.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.2 MiB    759.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.2 MiB    759.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.4 MiB    759.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.4 MiB    759.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    759.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    759.6 MiB    759.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    759.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    760.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    760.2 MiB    760.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    760.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    760.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    760.2 MiB    760.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    760.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    760.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    760.2 MiB    760.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    760.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    760.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    760.8 MiB    760.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    760.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.2 MiB    761.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.2 MiB    761.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.5 MiB    761.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.7 MiB    761.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.7 MiB    761.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.7 MiB    761.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    761.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    761.7 MiB    761.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    761.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    762.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    762.3 MiB    762.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    762.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    762.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    762.3 MiB    762.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    762.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    762.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    762.3 MiB    762.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    762.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    762.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    762.6 MiB    762.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    762.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    762.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    762.8 MiB    762.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    762.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    763.7 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    763.7 MiB    763.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    763.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    763.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    763.8 MiB    763.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    763.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    763.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    763.9 MiB    763.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    763.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    763.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    763.9 MiB    763.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    763.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    764.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    764.0 MiB    764.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    764.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    764.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    764.7 MiB    764.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    764.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    764.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    764.7 MiB    764.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    764.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    764.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    764.9 MiB    764.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    764.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    765.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    765.0 MiB    765.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    765.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    765.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    765.2 MiB    765.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    765.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    765.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    765.7 MiB    765.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    765.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    765.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    765.9 MiB    765.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    765.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    765.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    765.9 MiB    765.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    765.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    765.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    765.9 MiB    765.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    765.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    766.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    766.4 MiB    766.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    766.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    766.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    766.6 MiB    766.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    766.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    766.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    766.6 MiB    766.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    766.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    766.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    766.8 MiB    766.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    766.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    767.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    767.4 MiB    767.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    767.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    767.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    767.7 MiB    767.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    767.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    767.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    767.9 MiB    767.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    767.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    768.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    768.2 MiB    768.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    768.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    768.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    768.2 MiB    768.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    768.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    768.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    768.5 MiB    768.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    768.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    769.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    769.0 MiB    769.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    769.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    769.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    769.0 MiB    769.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    769.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    769.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    769.1 MiB    769.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    769.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    769.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    769.2 MiB    769.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    769.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    769.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    769.8 MiB    769.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    769.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    769.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    769.8 MiB    769.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    769.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    770.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    770.3 MiB    770.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    770.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    770.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    770.3 MiB    770.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    770.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    770.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    770.3 MiB    770.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    770.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    770.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    770.4 MiB    770.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    770.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    770.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    770.8 MiB    770.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    770.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    771.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    771.2 MiB    771.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    771.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    771.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    771.5 MiB    771.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    771.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    771.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    771.5 MiB    771.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    771.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    771.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    771.9 MiB    771.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    771.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    772.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    772.2 MiB    772.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    772.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    772.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    772.3 MiB    772.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    772.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    772.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    772.4 MiB    772.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    772.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    772.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    772.5 MiB    772.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    772.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    772.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    772.6 MiB    772.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    772.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    772.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    772.8 MiB    772.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    772.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    773.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    773.1 MiB    773.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    773.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    773.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    773.1 MiB    773.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    773.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    773.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    773.6 MiB    773.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    773.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    773.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    773.6 MiB    773.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    773.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    774.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    774.2 MiB    774.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    774.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    774.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    774.9 MiB    774.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    774.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.2 MiB    775.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.2 MiB    775.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.2 MiB    775.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.2 MiB    775.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.3 MiB    775.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.5 MiB    775.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    775.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    775.8 MiB    775.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    775.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    776.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    776.2 MiB    776.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    776.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    777.6 MiB      1.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    777.6 MiB    777.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    777.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    777.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    777.7 MiB    777.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    777.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    777.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    777.7 MiB    777.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    777.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    777.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    777.9 MiB    777.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    777.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    778.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    778.3 MiB    778.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    778.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    778.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    778.3 MiB    778.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    778.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    778.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    778.4 MiB    778.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    778.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    778.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    778.4 MiB    778.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    778.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.2 MiB    779.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.2 MiB    779.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.2 MiB    779.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.4 MiB    779.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.4 MiB    779.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.4 MiB    779.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    779.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    779.7 MiB    779.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    779.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    780.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    780.4 MiB    780.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    780.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    780.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    780.4 MiB    780.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    780.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    780.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    780.4 MiB    780.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    780.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    780.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    780.6 MiB    780.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    780.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    780.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    780.8 MiB    780.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    780.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    780.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    780.9 MiB    780.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    780.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    781.6 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    781.6 MiB    781.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    781.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    781.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    781.7 MiB    781.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    781.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    781.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    781.8 MiB    781.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    781.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    781.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    781.8 MiB    781.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    781.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    781.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    781.9 MiB    781.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    781.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    782.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    782.2 MiB    782.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    782.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    782.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    782.7 MiB    782.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    782.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    782.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    782.9 MiB    782.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    782.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    783.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    783.7 MiB    783.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    783.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    784.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    784.2 MiB    784.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    784.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    784.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    784.8 MiB    784.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    784.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    784.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    784.8 MiB    784.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    784.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    784.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    784.9 MiB    784.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    784.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    785.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    785.1 MiB    785.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    785.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    785.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    785.4 MiB    785.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    785.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    786.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    786.0 MiB    786.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    786.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    786.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    786.1 MiB    786.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    786.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    786.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    786.1 MiB    786.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    786.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    786.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    786.3 MiB    786.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    786.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    787.4 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    787.4 MiB    787.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    787.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    788.5 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    788.5 MiB    788.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    788.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    788.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    788.7 MiB    788.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    788.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    788.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    788.7 MiB    788.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    788.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    788.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    788.7 MiB    788.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    788.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    789.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    789.0 MiB    789.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    789.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    789.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    789.0 MiB    789.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    789.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    789.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    789.2 MiB    789.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    789.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    789.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    789.6 MiB    789.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    789.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    789.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    789.6 MiB    789.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    789.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    789.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    789.9 MiB    789.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    789.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    790.7 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    790.7 MiB    790.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    790.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    790.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    790.8 MiB    790.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    790.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    790.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    790.8 MiB    790.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    790.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    791.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    791.0 MiB    791.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    791.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    791.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    791.0 MiB    791.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    791.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    791.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    791.4 MiB    791.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    791.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    791.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    791.9 MiB    791.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    791.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.2 MiB    792.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.3 MiB    792.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.4 MiB    792.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.5 MiB    792.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.8 MiB    792.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.8 MiB    792.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.9 MiB    792.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    792.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    792.9 MiB    792.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    792.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    793.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    793.2 MiB    793.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    793.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    793.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    793.4 MiB    793.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    793.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    794.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    794.1 MiB    794.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    794.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    794.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    794.8 MiB    794.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    794.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.0 MiB    795.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.1 MiB    795.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.2 MiB    795.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.2 MiB    795.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.2 MiB    795.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.3 MiB    795.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.7 MiB    795.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    795.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    795.8 MiB    795.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    795.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    796.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    796.1 MiB    796.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    796.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    796.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    796.4 MiB    796.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    796.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    796.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    796.9 MiB    796.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    796.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.0 MiB      1.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.0 MiB    798.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.1 MiB    798.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.2 MiB    798.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.2 MiB    798.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.2 MiB    798.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.2 MiB    798.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.6 MiB    798.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.7 MiB    798.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    798.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    798.9 MiB    798.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    798.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    799.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    799.4 MiB    799.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    799.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    799.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    799.8 MiB    799.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    799.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    799.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    799.8 MiB    799.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    799.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    799.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    799.8 MiB    799.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    799.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    799.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    799.8 MiB    799.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    799.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    800.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    800.1 MiB    800.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    800.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    800.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    800.7 MiB    800.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    800.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    800.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    800.8 MiB    800.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    800.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    801.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    801.0 MiB    801.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    801.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    801.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    801.6 MiB    801.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    801.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.0 MiB    802.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.0 MiB    802.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.0 MiB    802.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.1 MiB    802.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.2 MiB    802.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.5 MiB    802.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    802.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    802.6 MiB    802.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    802.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    803.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    803.1 MiB    803.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    803.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    803.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    803.3 MiB    803.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    803.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    803.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    803.3 MiB    803.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    803.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    804.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    804.1 MiB    804.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    804.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    804.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    804.8 MiB    804.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    804.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    804.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    804.8 MiB    804.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    804.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    804.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    804.8 MiB    804.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    804.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    804.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    804.8 MiB    804.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    804.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    805.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    805.1 MiB    805.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    805.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    805.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    805.6 MiB    805.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    805.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    806.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    806.1 MiB    806.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    806.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    806.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    806.9 MiB    806.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    806.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    807.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    807.1 MiB    807.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    807.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    807.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    807.5 MiB    807.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    807.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.0 MiB    808.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.1 MiB    808.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.3 MiB    808.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.4 MiB    808.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.4 MiB    808.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.4 MiB    808.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.7 MiB    808.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.8 MiB    808.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    808.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    808.9 MiB    808.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    808.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    809.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    809.3 MiB    809.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    809.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    809.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    809.5 MiB    809.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    809.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    809.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    809.6 MiB    809.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    809.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    809.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    809.6 MiB    809.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    809.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    810.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    810.2 MiB    810.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    810.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    810.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    810.5 MiB    810.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    810.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    810.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    810.6 MiB    810.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    810.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    810.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    810.9 MiB    810.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    810.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    811.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    811.2 MiB    811.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    811.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    811.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    811.3 MiB    811.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    811.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    811.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    811.4 MiB    811.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    811.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    811.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    811.6 MiB    811.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    811.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    812.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    812.0 MiB    812.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    812.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    812.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    812.1 MiB    812.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    812.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    812.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    812.3 MiB    812.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    812.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    812.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    812.3 MiB    812.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    812.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    812.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    812.6 MiB    812.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    812.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    812.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    812.6 MiB    812.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    812.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    813.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    813.1 MiB    813.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    813.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.0 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.0 MiB    814.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.2 MiB    814.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.8 MiB    814.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.8 MiB    814.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.8 MiB    814.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.8 MiB    814.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    814.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    814.8 MiB    814.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    814.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    815.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    815.3 MiB    815.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    815.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    815.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    815.4 MiB    815.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    815.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    815.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    815.9 MiB    815.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    815.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    816.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    816.4 MiB    816.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    816.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    816.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    816.7 MiB    816.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    816.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    817.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    817.2 MiB    817.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    817.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    817.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    817.3 MiB    817.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    817.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    817.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    817.4 MiB    817.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    817.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    817.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    817.5 MiB    817.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    817.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    817.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    817.5 MiB    817.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    817.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    817.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    817.8 MiB    817.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    817.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    818.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    818.3 MiB    818.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    818.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    818.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    818.6 MiB    818.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    818.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    818.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    818.8 MiB    818.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    818.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    818.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    818.9 MiB    818.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    818.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    819.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    819.3 MiB    819.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    819.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    819.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    819.3 MiB    819.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    819.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    819.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    819.4 MiB    819.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    819.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    819.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    819.6 MiB    819.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    819.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    819.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    819.7 MiB    819.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    819.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    820.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    820.0 MiB    820.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    820.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    820.6 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    820.6 MiB    820.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    820.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    820.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    820.7 MiB    820.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    820.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    821.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    821.0 MiB    821.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    821.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    821.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    821.4 MiB    821.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    821.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    821.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    821.9 MiB    821.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    821.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    821.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    821.9 MiB    821.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    821.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    822.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    822.0 MiB    822.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    822.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    822.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    822.0 MiB    822.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    822.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    822.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    822.2 MiB    822.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    822.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    822.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    822.3 MiB    822.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    822.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    822.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    822.4 MiB    822.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    822.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    822.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    822.9 MiB    822.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    822.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    823.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    823.2 MiB    823.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    823.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    824.6 MiB      1.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    824.6 MiB    824.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    824.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    825.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    825.0 MiB    825.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    825.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    825.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    825.0 MiB    825.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    825.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    825.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    825.2 MiB    825.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    825.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    825.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    825.2 MiB    825.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    825.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    825.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    825.3 MiB    825.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    825.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    825.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    825.5 MiB    825.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    825.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    826.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    826.0 MiB    826.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    826.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    826.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    826.6 MiB    826.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    826.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.2 MiB    827.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.3 MiB    827.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.8 MiB    827.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.8 MiB    827.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.8 MiB    827.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.8 MiB    827.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    827.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    827.8 MiB    827.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    827.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    828.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    828.1 MiB    828.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    828.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    828.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    828.5 MiB    828.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    828.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    828.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    828.7 MiB    828.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    828.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    828.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    828.7 MiB    828.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    828.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    828.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    828.7 MiB    828.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    828.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    829.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    829.3 MiB    829.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    829.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    829.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    829.3 MiB    829.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    829.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    829.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    829.3 MiB    829.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    829.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    829.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    829.3 MiB    829.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    829.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    829.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    829.8 MiB    829.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    829.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    830.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    830.2 MiB    830.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    830.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    830.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    830.2 MiB    830.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    830.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    830.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    830.3 MiB    830.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    830.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    830.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    830.4 MiB    830.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    830.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.0 MiB    831.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.4 MiB    831.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.5 MiB    831.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.6 MiB    831.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.6 MiB    831.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.6 MiB    831.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    831.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    831.8 MiB    831.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    831.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    832.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    832.1 MiB    832.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    832.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    833.1 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    833.1 MiB    833.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    833.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    833.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    833.6 MiB    833.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    833.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    834.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    834.2 MiB    834.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    834.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    834.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    834.7 MiB    834.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    834.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    834.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    834.7 MiB    834.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    834.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    835.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    835.0 MiB    835.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    835.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    835.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    835.0 MiB    835.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    835.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    835.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    835.3 MiB    835.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    835.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    835.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    835.4 MiB    835.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    835.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    835.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    835.6 MiB    835.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    835.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    836.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    836.3 MiB    836.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    836.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    836.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    836.8 MiB    836.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    836.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.0 MiB      1.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.0 MiB    838.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    838.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    838.4 MiB    838.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    838.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.1 MiB    839.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.1 MiB    839.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.2 MiB    839.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.8 MiB    839.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.9 MiB    839.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.9 MiB    839.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.9 MiB    839.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.9 MiB    839.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    839.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    839.9 MiB    839.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    839.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    840.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    840.0 MiB    840.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    840.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    840.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    840.2 MiB    840.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    840.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    840.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    840.5 MiB    840.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    840.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    840.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    840.9 MiB    840.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    840.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    841.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    841.7 MiB    841.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    841.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    841.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    841.8 MiB    841.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    841.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    841.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    841.8 MiB    841.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    841.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    841.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    841.8 MiB    841.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    841.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    841.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    841.9 MiB    841.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    841.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    842.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    842.4 MiB    842.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    842.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    842.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    842.7 MiB    842.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    842.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    843.6 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    843.6 MiB    843.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    843.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    843.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    843.9 MiB    843.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    843.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    843.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    843.9 MiB    843.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    843.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    844.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    844.5 MiB    844.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    844.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    844.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    844.6 MiB    844.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    844.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    844.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    844.8 MiB    844.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    844.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    844.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    844.8 MiB    844.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    844.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    844.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    844.8 MiB    844.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    844.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    845.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    845.4 MiB    845.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    845.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    845.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    845.7 MiB    845.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    845.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    846.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    846.3 MiB    846.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    846.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    846.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    846.5 MiB    846.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    846.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    847.2 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    847.2 MiB    847.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    847.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.1 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.1 MiB    848.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.2 MiB    848.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.3 MiB    848.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.3 MiB    848.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.3 MiB    848.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.3 MiB    848.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    848.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    848.3 MiB    848.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    848.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.0 MiB    849.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.0 MiB    849.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.4 MiB    849.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.8 MiB    849.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.8 MiB    849.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.8 MiB    849.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    849.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    849.8 MiB    849.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    849.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    850.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    850.1 MiB    850.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    850.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    850.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    850.5 MiB    850.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    850.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    850.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    850.8 MiB    850.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    850.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    851.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    851.2 MiB    851.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    851.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    851.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    851.6 MiB    851.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    851.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    851.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    851.6 MiB    851.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    851.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.4 MiB    852.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.4 MiB    852.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.4 MiB    852.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.4 MiB    852.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.8 MiB    852.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.8 MiB    852.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    852.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    852.8 MiB    852.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    852.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    853.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


<keras.engine.sequential.Sequential object at 0x0000022E3C688FD0>
Loading time for LSTM (dataset sundaram_factors, range TR5): 0.022005081176757812
Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    853.8 MiB    853.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    853.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    854.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    854.0 MiB    854.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    854.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    854.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    854.4 MiB    854.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    854.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    854.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    854.5 MiB    854.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    854.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    854.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    854.8 MiB    854.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    854.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    854.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    854.8 MiB    854.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    854.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    855.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    855.5 MiB    855.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    855.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    855.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    855.5 MiB    855.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    855.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    855.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    855.5 MiB    855.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    855.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    856.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    856.1 MiB    856.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    856.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    856.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    856.1 MiB    856.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    856.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    857.9 MiB      1.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    857.9 MiB    857.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    857.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    857.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    857.9 MiB    857.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    857.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    857.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    857.9 MiB    857.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    857.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    858.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    858.0 MiB    858.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    858.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    858.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    858.0 MiB    858.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    858.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    858.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    858.2 MiB    858.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    858.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    858.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    858.7 MiB    858.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    858.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    859.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    859.2 MiB    859.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    859.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    859.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    859.2 MiB    859.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    859.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    859.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    859.5 MiB    859.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    859.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    859.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    859.8 MiB    859.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    859.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    859.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    859.8 MiB    859.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    859.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    859.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    859.8 MiB    859.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    859.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    860.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    860.1 MiB    860.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    860.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    860.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    860.1 MiB    860.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    860.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    860.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    860.1 MiB    860.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    860.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    860.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    860.4 MiB    860.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    860.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    860.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    860.8 MiB    860.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    860.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    861.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    861.6 MiB    861.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    861.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    861.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    861.7 MiB    861.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    861.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    861.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    861.8 MiB    861.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    861.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    861.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    861.8 MiB    861.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    861.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    862.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    862.0 MiB    862.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    862.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    862.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    862.0 MiB    862.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    862.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    862.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    862.1 MiB    862.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    862.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    862.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    862.5 MiB    862.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    862.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    863.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    863.0 MiB    863.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    863.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    863.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    863.5 MiB    863.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    863.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    864.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    864.4 MiB    864.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    864.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    864.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    864.7 MiB    864.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    864.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    864.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    864.9 MiB    864.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    864.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    864.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    864.9 MiB    864.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    864.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    865.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    865.0 MiB    865.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    865.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    865.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    865.0 MiB    865.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    865.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    865.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    865.0 MiB    865.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    865.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    865.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    865.5 MiB    865.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    865.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    865.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    865.5 MiB    865.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    865.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    865.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    865.5 MiB    865.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    865.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    866.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    866.0 MiB    866.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    866.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    866.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    866.6 MiB    866.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    866.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.2 MiB    867.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.2 MiB    867.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.2 MiB    867.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.3 MiB    867.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.4 MiB    867.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.4 MiB    867.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.5 MiB    867.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    867.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    867.7 MiB    867.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    867.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    868.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    868.1 MiB    868.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    868.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    868.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    868.5 MiB    868.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    868.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    869.4 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    869.4 MiB    869.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    869.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    869.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    869.4 MiB    869.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    869.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    869.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    869.4 MiB    869.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    869.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    869.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    869.5 MiB    869.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    869.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    869.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    869.6 MiB    869.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    869.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    869.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    869.8 MiB    869.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    869.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    870.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    870.1 MiB    870.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    870.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    870.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    870.6 MiB    870.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    870.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    871.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    871.1 MiB    871.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    871.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    871.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    871.3 MiB    871.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    871.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    871.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    871.4 MiB    871.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    871.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    871.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    871.4 MiB    871.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    871.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    872.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    872.0 MiB    872.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    872.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    872.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    872.0 MiB    872.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    872.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    872.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    872.0 MiB    872.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    872.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    872.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    872.1 MiB    872.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    872.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    872.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    872.6 MiB    872.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    872.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    872.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    872.6 MiB    872.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    872.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    873.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    873.2 MiB    873.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    873.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    874.3 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    874.3 MiB    874.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    874.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    874.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    874.6 MiB    874.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    874.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    874.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    874.6 MiB    874.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    874.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    874.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    874.6 MiB    874.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    874.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    874.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    874.6 MiB    874.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    874.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    875.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    875.1 MiB    875.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    875.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    875.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    875.1 MiB    875.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    875.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    875.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    875.7 MiB    875.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    875.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    875.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    875.8 MiB    875.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    875.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.2 MiB    876.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.5 MiB    876.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.5 MiB    876.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.6 MiB    876.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.6 MiB    876.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.7 MiB    876.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    876.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    876.7 MiB    876.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    876.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    877.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    877.2 MiB    877.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    877.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    877.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    877.6 MiB    877.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    877.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    878.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    878.3 MiB    878.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    878.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    878.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    878.5 MiB    878.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    878.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    878.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    878.6 MiB    878.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    878.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    879.7 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    879.7 MiB    879.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    879.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    879.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    879.8 MiB    879.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    879.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    879.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    879.8 MiB    879.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    879.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    880.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    880.0 MiB    880.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    880.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    880.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    880.0 MiB    880.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    880.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    880.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    880.1 MiB    880.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    880.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    880.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    880.1 MiB    880.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    880.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    880.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    880.2 MiB    880.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    880.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    881.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    881.0 MiB    881.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    881.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    881.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    881.1 MiB    881.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    881.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    881.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    881.6 MiB    881.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    881.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    881.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    881.7 MiB    881.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    881.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    881.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    881.7 MiB    881.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    881.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    881.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    881.7 MiB    881.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    881.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    882.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    882.2 MiB    882.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    882.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    882.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    882.4 MiB    882.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    882.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    882.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    882.7 MiB    882.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    882.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    882.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    882.8 MiB    882.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    882.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    883.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    883.3 MiB    883.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    883.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    883.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    883.6 MiB    883.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    883.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    884.7 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    884.7 MiB    884.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    884.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    884.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    884.7 MiB    884.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    884.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    885.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    885.0 MiB    885.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    885.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    885.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    885.1 MiB    885.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    885.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    885.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    885.1 MiB    885.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    885.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    885.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    885.1 MiB    885.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    885.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    885.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    885.6 MiB    885.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    885.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    886.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    886.1 MiB    886.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    886.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    886.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    886.9 MiB    886.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    886.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.3 MiB    887.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.3 MiB    887.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.4 MiB    887.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.5 MiB    887.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.5 MiB    887.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.6 MiB    887.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.8 MiB    887.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    887.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    887.9 MiB    887.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    887.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    888.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    888.3 MiB    888.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    888.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    888.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    888.9 MiB    888.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    888.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    889.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    889.2 MiB    889.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    889.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    889.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    889.5 MiB    889.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    889.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    889.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    889.5 MiB    889.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    889.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    889.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    889.7 MiB    889.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    889.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    889.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    889.7 MiB    889.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    889.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    889.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    889.8 MiB    889.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    889.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    890.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    890.2 MiB    890.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    890.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    890.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    890.2 MiB    890.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    890.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    890.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    890.6 MiB    890.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    890.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    890.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    890.9 MiB    890.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    890.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.0 MiB    891.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.1 MiB    891.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.2 MiB    891.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.2 MiB    891.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.4 MiB    891.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.4 MiB    891.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    891.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    891.9 MiB    891.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    891.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    892.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    892.0 MiB    892.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    892.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    892.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    892.3 MiB    892.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    892.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    893.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    893.0 MiB    893.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    893.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    893.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    893.6 MiB    893.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    893.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    894.9 MiB      1.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    894.9 MiB    894.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    894.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.0 MiB    895.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.0 MiB    895.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.4 MiB    895.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.4 MiB    895.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.4 MiB    895.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.4 MiB    895.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.4 MiB    895.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    895.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    895.9 MiB    895.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    895.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    896.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    896.0 MiB    896.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    896.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    896.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    896.0 MiB    896.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    896.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    896.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    896.0 MiB    896.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    896.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    896.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    896.1 MiB    896.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    896.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    896.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    896.5 MiB    896.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    896.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    896.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    896.8 MiB    896.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    896.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    897.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    897.1 MiB    897.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    897.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    897.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    897.3 MiB    897.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    897.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    897.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    897.3 MiB    897.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    897.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    898.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    898.0 MiB    898.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    898.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    898.8 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    898.8 MiB    898.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    898.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    898.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    898.8 MiB    898.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    898.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    898.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    898.8 MiB    898.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    898.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    898.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    898.9 MiB    898.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    898.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    898.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    898.9 MiB    898.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    898.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    899.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    899.1 MiB    899.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    899.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    899.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    899.4 MiB    899.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    899.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    899.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    899.4 MiB    899.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    899.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    899.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    899.4 MiB    899.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    899.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    899.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    899.4 MiB    899.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    899.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    900.3 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    900.4 MiB    900.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    900.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    900.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    900.9 MiB    900.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    900.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    901.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    901.2 MiB    901.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    901.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    901.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    901.3 MiB    901.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    901.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    901.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    901.3 MiB    901.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    901.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    901.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    901.7 MiB    901.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    901.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    902.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    902.0 MiB    902.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    902.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    902.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    902.3 MiB    902.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    902.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    902.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    902.4 MiB    902.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    902.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    902.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    902.6 MiB    902.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    902.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    903.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    903.2 MiB    903.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    903.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    903.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    903.6 MiB    903.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    903.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    903.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    903.6 MiB    903.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    903.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    903.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    903.6 MiB    903.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    903.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    903.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    903.6 MiB    903.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    903.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    904.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    904.1 MiB    904.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    904.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    904.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    904.1 MiB    904.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    904.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    904.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    904.5 MiB    904.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    904.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    904.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    904.8 MiB    904.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    904.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    905.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    905.1 MiB    905.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    905.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    905.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    905.2 MiB    905.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    905.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    906.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    906.0 MiB    906.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    906.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    906.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    906.0 MiB    906.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    906.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    906.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    906.0 MiB    906.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    906.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    906.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    906.0 MiB    906.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    906.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    906.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    906.1 MiB    906.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    906.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    906.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    906.8 MiB    906.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    906.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    907.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    907.0 MiB    907.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    907.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    907.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    907.2 MiB    907.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    907.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    907.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    907.5 MiB    907.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    907.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.1 MiB    908.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.5 MiB    908.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.5 MiB    908.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.5 MiB    908.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.5 MiB    908.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.8 MiB    908.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    908.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    908.8 MiB    908.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    908.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    909.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    909.1 MiB    909.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    909.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    909.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    909.3 MiB    909.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    909.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    910.4 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    910.4 MiB    910.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    910.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    910.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    910.4 MiB    910.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    910.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    910.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    910.4 MiB    910.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    910.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    910.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    910.7 MiB    910.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    910.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    910.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    910.7 MiB    910.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    910.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    910.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    910.8 MiB    910.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    910.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    912.1 MiB      1.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    912.1 MiB    912.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    912.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    912.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    912.1 MiB    912.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    912.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    912.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    912.2 MiB    912.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    912.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    912.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    912.2 MiB    912.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    912.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    912.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    912.5 MiB    912.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    912.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    913.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    913.0 MiB    913.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    913.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    913.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    913.5 MiB    913.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    913.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    913.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    913.5 MiB    913.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    913.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    913.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    913.5 MiB    913.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    913.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    913.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    913.6 MiB    913.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    913.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    913.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    913.8 MiB    913.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    913.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    914.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    914.0 MiB    914.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    914.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    914.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    914.4 MiB    914.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    914.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    914.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    914.5 MiB    914.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    914.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    914.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    914.7 MiB    914.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    914.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    915.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    915.2 MiB    915.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    915.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.0 MiB    916.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.1 MiB    916.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.1 MiB    916.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.1 MiB    916.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.2 MiB    916.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.2 MiB    916.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.2 MiB    916.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.8 MiB    916.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    916.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    916.9 MiB    916.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    916.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    917.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    917.5 MiB    917.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    917.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    918.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    918.4 MiB    918.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    918.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    918.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    918.4 MiB    918.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    918.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    918.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    918.4 MiB    918.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    918.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    918.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    918.5 MiB    918.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    918.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    918.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    918.5 MiB    918.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    918.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    918.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    918.5 MiB    918.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    918.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    919.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    919.3 MiB    919.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    919.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    919.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    919.6 MiB    919.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    919.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    919.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    919.7 MiB    919.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    919.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    919.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    919.9 MiB    919.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    919.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    920.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    920.1 MiB    920.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    920.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    920.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    920.2 MiB    920.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    920.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    920.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    920.4 MiB    920.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    920.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    920.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    920.6 MiB    920.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    920.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    920.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    920.7 MiB    920.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    920.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    920.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    920.8 MiB    920.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    920.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    921.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    921.5 MiB    921.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    921.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    921.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    921.7 MiB    921.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    921.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    922.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    922.0 MiB    922.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    922.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    922.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    922.4 MiB    922.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    922.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    923.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    923.0 MiB    923.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    923.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    923.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    923.0 MiB    923.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    923.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    923.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    923.5 MiB    923.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    923.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    923.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    923.5 MiB    923.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    923.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    923.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    923.8 MiB    923.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    923.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    923.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    923.9 MiB    923.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    923.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    924.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    924.6 MiB    924.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    924.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    924.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    924.9 MiB    924.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    924.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    925.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    925.3 MiB    925.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    925.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    925.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    925.5 MiB    925.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    925.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    925.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    925.9 MiB    925.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    925.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    926.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    926.0 MiB    926.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    926.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    926.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    926.0 MiB    926.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    926.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    926.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    926.0 MiB    926.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    926.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    926.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    926.1 MiB    926.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    926.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    926.9 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    926.9 MiB    926.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    926.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    926.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    926.9 MiB    926.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    926.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    927.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    927.5 MiB    927.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    927.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    927.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    927.5 MiB    927.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    927.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    927.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    927.7 MiB    927.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    927.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.1 MiB      1.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.1 MiB    929.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.2 MiB    929.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.2 MiB    929.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.2 MiB    929.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.5 MiB    929.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.5 MiB    929.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    929.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    929.7 MiB    929.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    929.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    930.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    930.1 MiB    930.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    930.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    930.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    930.4 MiB    930.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    930.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    930.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    930.4 MiB    930.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    930.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    931.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    931.0 MiB    931.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    931.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    931.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    931.2 MiB    931.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    931.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    931.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    931.3 MiB    931.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    931.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    931.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    931.6 MiB    931.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    931.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    931.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    931.6 MiB    931.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    931.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    932.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    932.1 MiB    932.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    932.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    932.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    932.3 MiB    932.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    932.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    932.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    932.7 MiB    932.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    932.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    932.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    932.9 MiB    932.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    932.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    933.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    933.0 MiB    933.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    933.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    933.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    933.5 MiB    933.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    933.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    933.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    933.6 MiB    933.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    933.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    934.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    934.1 MiB    934.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    934.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    934.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    934.2 MiB    934.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    934.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    934.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    934.3 MiB    934.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    934.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    934.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    934.7 MiB    934.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    934.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    935.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    935.1 MiB    935.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    935.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    935.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    935.4 MiB    935.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    935.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    935.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    935.5 MiB    935.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    935.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    935.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    935.6 MiB    935.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    935.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    936.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    936.0 MiB    936.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    936.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    936.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    936.3 MiB    936.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    936.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    936.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    936.3 MiB    936.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    936.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    936.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    936.3 MiB    936.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    936.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    936.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    936.9 MiB    936.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    936.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    936.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    936.9 MiB    936.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    936.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    937.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    937.1 MiB    937.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    937.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    937.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    937.3 MiB    937.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    937.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.0 MiB    938.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.1 MiB    938.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.4 MiB    938.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.4 MiB    938.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.4 MiB    938.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.4 MiB    938.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    938.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    938.9 MiB    938.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    938.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    939.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    939.1 MiB    939.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    939.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    939.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    939.1 MiB    939.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    939.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    939.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    939.4 MiB    939.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    939.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    939.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    939.4 MiB    939.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    939.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.0 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.0 MiB    940.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.2 MiB    940.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.3 MiB    940.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.4 MiB    940.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.4 MiB    940.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.4 MiB    940.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.6 MiB    940.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    940.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    940.8 MiB    940.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    940.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    941.8 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    941.8 MiB    941.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    941.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    942.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    942.5 MiB    942.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    942.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    943.2 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    943.2 MiB    943.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    943.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    943.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    943.3 MiB    943.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    943.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    943.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    943.6 MiB    943.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    943.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    943.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    943.6 MiB    943.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    943.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    943.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    943.6 MiB    943.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    943.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    943.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    943.8 MiB    943.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    943.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    944.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    944.1 MiB    944.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    944.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    944.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    944.7 MiB    944.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    944.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    944.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    944.7 MiB    944.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    944.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    945.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    945.4 MiB    945.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    945.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    945.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    945.8 MiB    945.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    945.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    945.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.0 MiB    946.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.0 MiB    946.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.0 MiB    946.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.0 MiB    946.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.0 MiB    946.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.0 MiB    946.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.5 MiB    946.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.5 MiB    946.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    946.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    946.8 MiB    946.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    946.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    947.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    947.6 MiB    947.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    947.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    948.6 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    948.6 MiB    948.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    948.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    948.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    948.6 MiB    948.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    948.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    948.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    948.6 MiB    948.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    948.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    948.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    948.7 MiB    948.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    948.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    948.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    948.7 MiB    948.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    948.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    949.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    949.0 MiB    949.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    949.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    949.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    949.1 MiB    949.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    949.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    949.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    949.1 MiB    949.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    949.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    949.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    949.2 MiB    949.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    949.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    949.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    949.4 MiB    949.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    949.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    950.2 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    950.2 MiB    950.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    950.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    950.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    950.3 MiB    950.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    950.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    950.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    950.3 MiB    950.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    950.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    950.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    950.4 MiB    950.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    950.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    950.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    950.5 MiB    950.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    950.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.3 MiB    951.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.6 MiB    951.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.8 MiB    952.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.0 MiB    953.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB     -2.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.0 MiB    951.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.1 MiB    951.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.5 MiB    951.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.5 MiB    951.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.5 MiB    951.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.5 MiB    951.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.6 MiB    951.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.6 MiB    951.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.6 MiB    951.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.6 MiB    951.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    951.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    951.6 MiB    951.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    951.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.1 MiB    952.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.1 MiB    952.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.1 MiB    952.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.1 MiB    952.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.3 MiB    952.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.4 MiB    952.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.7 MiB    952.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.7 MiB    952.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.7 MiB    952.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.7 MiB    952.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.7 MiB    952.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    952.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    952.7 MiB    952.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    952.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.1 MiB    953.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.2 MiB    953.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.2 MiB    953.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.3 MiB    953.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.4 MiB    953.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.4 MiB    953.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.4 MiB    953.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.6 MiB    953.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.6 MiB    953.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.7 MiB    953.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.7 MiB    953.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.8 MiB    953.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.8 MiB    953.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    953.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    953.9 MiB    953.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    953.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.2 MiB    954.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.2 MiB    954.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.2 MiB    954.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.3 MiB    954.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.7 MiB    954.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.7 MiB    954.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    954.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    954.7 MiB    954.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    954.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    955.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    955.4 MiB    955.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    955.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    955.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    955.5 MiB    955.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    955.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    955.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    955.6 MiB    955.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    955.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    955.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    955.6 MiB    955.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    955.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.0 MiB    956.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.0 MiB    956.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.2 MiB    956.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.2 MiB    956.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.4 MiB    956.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.6 MiB    956.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    956.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    956.8 MiB    956.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    956.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.4 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.4 MiB    957.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.4 MiB    957.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.4 MiB    957.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.6 MiB    957.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.8 MiB    957.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.8 MiB    957.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    957.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    957.8 MiB    957.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    957.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    958.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    958.0 MiB    958.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    958.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    958.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    958.4 MiB    958.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    958.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    958.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    958.9 MiB    958.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    958.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    959.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    959.4 MiB    959.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    959.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    959.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    959.4 MiB    959.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    959.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    959.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    959.4 MiB    959.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    959.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    959.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    959.4 MiB    959.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    959.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    959.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    959.6 MiB    959.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    959.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    959.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    959.9 MiB    959.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    959.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    960.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    960.5 MiB    960.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    960.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    961.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    961.3 MiB    961.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    961.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    961.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    961.5 MiB    961.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    961.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    961.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    961.5 MiB    961.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    961.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.3 MiB    962.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.3 MiB    962.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.3 MiB    962.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.3 MiB    962.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.3 MiB    962.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.4 MiB    962.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.8 MiB    962.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.9 MiB    962.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    962.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    962.9 MiB    962.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    962.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    963.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    963.3 MiB    963.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    963.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    963.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    963.5 MiB    963.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    963.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    963.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    963.5 MiB    963.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    963.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    963.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    963.8 MiB    963.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    963.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    963.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


<keras.engine.sequential.Sequential object at 0x0000022E613FAF90>
Loading time for LSTM (dataset sundaram_factors, range TR6): 0.022013187408447266
Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    964.3 MiB    964.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    964.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    964.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    964.4 MiB    964.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    964.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    964.7 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    964.7 MiB    964.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    964.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    964.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    964.7 MiB    964.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    964.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    965.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    965.0 MiB    965.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    965.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    965.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    965.5 MiB    965.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    965.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    965.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    965.5 MiB    965.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    965.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    965.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    965.5 MiB    965.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    965.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    965.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    965.5 MiB    965.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    965.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    966.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    966.3 MiB    966.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    966.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    966.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    966.4 MiB    966.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    966.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    966.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    966.4 MiB    966.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    966.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    966.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    966.8 MiB    966.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    966.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    967.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    967.5 MiB    967.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    967.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    968.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    968.0 MiB    968.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    968.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    968.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    968.3 MiB    968.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    968.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    968.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    968.3 MiB    968.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    968.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    968.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    968.4 MiB    968.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    968.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    968.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    968.7 MiB    968.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    968.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    969.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    969.0 MiB    969.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    969.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    969.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    969.3 MiB    969.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    969.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    969.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    969.7 MiB    969.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    969.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    970.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    970.2 MiB    970.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    970.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    970.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    970.9 MiB    970.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    970.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    971.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    971.1 MiB    971.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    971.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    971.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    971.2 MiB    971.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    971.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    971.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    971.3 MiB    971.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    971.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    971.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    971.3 MiB    971.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    971.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    971.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    971.3 MiB    971.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    971.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    972.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    972.0 MiB    972.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    972.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    972.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    972.0 MiB    972.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    972.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    972.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    972.3 MiB    972.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    972.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    972.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    972.5 MiB    972.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    972.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    972.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    972.6 MiB    972.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    972.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.1 MiB    973.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.1 MiB    973.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.1 MiB    973.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.2 MiB    973.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.4 MiB    973.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.6 MiB    973.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    973.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    973.6 MiB    973.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    973.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    974.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    974.0 MiB    974.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    974.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    974.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    974.2 MiB    974.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    974.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    974.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    974.6 MiB    974.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    974.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    974.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    974.8 MiB    974.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    974.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    974.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    974.8 MiB    974.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    974.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    974.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    974.8 MiB    974.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    974.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    975.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    975.2 MiB    975.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    975.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    975.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    975.2 MiB    975.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    975.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    975.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    975.8 MiB    975.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    975.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    976.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    976.1 MiB    976.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    976.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    976.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    976.4 MiB    976.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    976.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    976.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    976.7 MiB    976.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    976.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    977.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    977.1 MiB    977.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    977.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    977.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    977.6 MiB    977.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    977.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    977.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    977.6 MiB    977.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    977.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    977.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    977.6 MiB    977.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    977.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    977.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    977.7 MiB    977.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    977.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    978.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    978.0 MiB    978.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    978.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    978.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    978.4 MiB    978.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    978.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    978.5 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    978.5 MiB    978.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    978.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    979.7 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    979.7 MiB    979.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    979.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.0 MiB    980.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.0 MiB    980.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.7 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.7 MiB    980.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.7 MiB    980.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.7 MiB    980.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.7 MiB    980.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    980.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    980.9 MiB    980.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    980.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    981.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    981.2 MiB    981.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    981.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    981.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    981.4 MiB    981.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    981.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    981.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    981.4 MiB    981.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    981.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    981.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    981.8 MiB    981.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    981.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    981.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    981.8 MiB    981.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    981.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.2 MiB    982.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.2 MiB    982.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.2 MiB    982.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.2 MiB    982.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.4 MiB    982.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.4 MiB    982.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    982.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    982.6 MiB    982.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    982.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.1 MiB    983.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.3 MiB    983.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.6 MiB    983.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.8 MiB    983.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.8 MiB    983.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.8 MiB    983.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    983.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    983.8 MiB    983.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    983.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    984.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    984.1 MiB    984.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    984.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    984.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    984.7 MiB    984.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    984.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    984.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    984.8 MiB    984.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    984.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    985.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    985.0 MiB    985.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    985.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    985.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    985.1 MiB    985.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    985.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    985.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    985.5 MiB    985.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    985.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.0 MiB    986.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.5 MiB    986.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.5 MiB    986.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.5 MiB    986.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.6 MiB    986.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.9 MiB    986.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    986.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    986.9 MiB    986.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    986.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    987.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    987.2 MiB    987.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    987.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    988.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    988.0 MiB    988.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    988.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    988.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    988.3 MiB    988.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    988.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    988.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    988.6 MiB    988.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    988.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    988.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    988.7 MiB    988.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    988.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    988.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    988.7 MiB    988.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    988.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    989.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    989.0 MiB    989.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    989.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    989.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    989.0 MiB    989.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    989.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    989.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    989.1 MiB    989.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    989.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    989.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    989.5 MiB    989.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    989.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    989.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    989.9 MiB    989.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    989.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    989.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    989.9 MiB    989.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    989.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.3 MiB    990.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.6 MiB    990.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.6 MiB    990.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.6 MiB    990.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.7 MiB    990.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.8 MiB    990.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    990.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    990.9 MiB    990.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    990.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    991.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    991.1 MiB    991.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    991.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    991.8 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    991.8 MiB    991.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    991.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    991.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    991.9 MiB    991.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    991.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.2 MiB    992.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.3 MiB    992.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.3 MiB    992.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.3 MiB    992.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.6 MiB    992.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.7 MiB    992.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    992.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    992.8 MiB    992.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    992.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    993.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    993.0 MiB    993.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    993.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    993.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    993.1 MiB    993.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    993.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    993.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    993.3 MiB    993.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    993.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    993.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    993.6 MiB    993.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    993.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    994.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    994.0 MiB    994.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    994.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    994.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    994.0 MiB    994.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    994.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    994.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    994.5 MiB    994.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    994.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    994.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    994.5 MiB    994.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    994.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    994.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    994.9 MiB    994.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    994.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    995.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    995.1 MiB    995.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    995.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    995.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    995.1 MiB    995.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    995.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    995.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    995.7 MiB    995.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    995.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    995.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    995.7 MiB    995.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    995.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.3 MiB    996.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.7 MiB    996.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.7 MiB    996.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.7 MiB    996.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.7 MiB    996.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.8 MiB    996.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    996.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    996.8 MiB    996.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    996.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    997.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    997.1 MiB    997.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    997.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    997.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    997.5 MiB    997.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    997.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.2 MiB    998.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.5 MiB    998.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.7 MiB    998.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.7 MiB    998.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.7 MiB    998.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.8 MiB    998.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    998.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    998.8 MiB    998.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    998.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    999.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    999.2 MiB    999.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    999.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    999.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    999.3 MiB    999.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    999.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147    999.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143    999.6 MiB    999.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145    999.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1000.3 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1000.3 MiB   1000.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1000.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1000.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1000.8 MiB   1000.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1000.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.2 MiB   1001.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.2 MiB   1001.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.5 MiB   1001.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.6 MiB   1001.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.7 MiB   1001.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.8 MiB   1001.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1001.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1001.9 MiB   1001.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1001.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1002.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1002.3 MiB   1002.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1002.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1002.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1002.7 MiB   1002.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1002.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1002.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1002.7 MiB   1002.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1002.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1003.6 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1003.6 MiB   1003.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1003.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1003.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1003.6 MiB   1003.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1003.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1003.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1003.7 MiB   1003.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1003.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1004.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1004.0 MiB   1004.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1004.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1004.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1004.0 MiB   1004.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1004.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1004.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1004.0 MiB   1004.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1004.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1004.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1004.3 MiB   1004.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1004.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1004.9 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1004.9 MiB   1004.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1004.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1005.8 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1005.8 MiB   1005.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1005.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1006.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1006.1 MiB   1006.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1006.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1006.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1006.3 MiB   1006.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1006.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1006.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1006.5 MiB   1006.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1006.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1006.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1006.6 MiB   1006.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1006.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1006.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1006.6 MiB   1006.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1006.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1006.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1006.6 MiB   1006.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1006.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1007.4 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1007.4 MiB   1007.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1007.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1007.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1007.6 MiB   1007.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1007.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1007.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1007.6 MiB   1007.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1007.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1007.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1007.9 MiB   1007.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1007.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1008.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1008.0 MiB   1008.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1008.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1008.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1008.6 MiB   1008.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1008.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1008.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1008.6 MiB   1008.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1008.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1008.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1008.9 MiB   1008.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1008.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1009.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1009.0 MiB   1009.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1009.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1009.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1009.5 MiB   1009.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1009.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1009.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1009.7 MiB   1009.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1009.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1010.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1010.1 MiB   1010.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1010.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1010.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1010.3 MiB   1010.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1010.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1010.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1010.4 MiB   1010.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1010.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1010.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1010.6 MiB   1010.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1010.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.2 MiB   1011.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.2 MiB   1011.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.2 MiB   1011.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.2 MiB   1011.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.6 MiB   1011.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.6 MiB   1011.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1011.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1011.9 MiB   1011.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1011.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1012.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1012.2 MiB   1012.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1012.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1013.2 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1013.2 MiB   1013.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1013.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1013.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1013.2 MiB   1013.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1013.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1013.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1013.3 MiB   1013.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1013.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1013.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1013.5 MiB   1013.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1013.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1013.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1013.5 MiB   1013.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1013.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1014.0 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1014.0 MiB   1014.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1014.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1014.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1014.2 MiB   1014.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1014.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1014.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1014.5 MiB   1014.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1014.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1014.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1014.7 MiB   1014.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1014.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1014.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1014.8 MiB   1014.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1014.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1015.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1015.4 MiB   1015.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1015.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1015.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1015.6 MiB   1015.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1015.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1016.2 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1016.2 MiB   1016.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1016.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1016.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1016.3 MiB   1016.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1016.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1016.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1016.4 MiB   1016.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1016.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1016.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1016.5 MiB   1016.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1016.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1016.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1016.5 MiB   1016.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1016.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1016.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1016.8 MiB   1016.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1016.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1017.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1017.3 MiB   1017.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1017.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1017.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1017.6 MiB   1017.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1017.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1017.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1017.6 MiB   1017.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1017.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.0 MiB   1018.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.1 MiB   1018.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.1 MiB   1018.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.2 MiB   1018.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.5 MiB   1018.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.5 MiB   1018.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1018.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1018.6 MiB   1018.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1018.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1019.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1019.1 MiB   1019.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1019.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1019.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1019.5 MiB   1019.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1019.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1019.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1019.9 MiB   1019.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1019.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1019.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1019.9 MiB   1019.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1019.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.3 MiB   1020.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.3 MiB   1020.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.3 MiB   1020.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.4 MiB   1020.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.5 MiB   1020.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.8 MiB   1020.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1020.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1020.9 MiB   1020.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1020.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1021.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1021.3 MiB   1021.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1021.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1021.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1021.8 MiB   1021.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1021.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1022.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1022.3 MiB   1022.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1022.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1022.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1022.8 MiB   1022.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1022.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1022.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1022.9 MiB   1022.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1022.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1023.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1023.1 MiB   1023.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1023.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1023.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1023.1 MiB   1023.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1023.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1023.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1023.4 MiB   1023.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1023.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1023.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1023.9 MiB   1023.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1023.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1024.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1024.0 MiB   1024.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1024.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1024.6 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1024.6 MiB   1024.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1024.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1025.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1025.0 MiB   1025.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1025.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1025.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1025.1 MiB   1025.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1025.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1025.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1025.5 MiB   1025.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1025.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1025.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1025.5 MiB   1025.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1025.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1025.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1025.6 MiB   1025.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1025.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1026.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1026.0 MiB   1026.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1026.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1026.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1026.1 MiB   1026.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1026.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1026.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1026.1 MiB   1026.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1026.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1026.8 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1026.8 MiB   1026.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1026.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1026.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1026.8 MiB   1026.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1026.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1027.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1027.1 MiB   1027.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1027.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1027.7 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1027.7 MiB   1027.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1027.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1028.8 MiB      1.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1028.8 MiB   1028.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1028.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1028.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1028.8 MiB   1028.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1028.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1028.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1028.9 MiB   1028.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1028.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1028.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1028.9 MiB   1028.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1028.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1029.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1029.0 MiB   1029.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1029.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1029.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1029.5 MiB   1029.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1029.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1029.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1029.8 MiB   1029.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1029.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1029.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1029.8 MiB   1029.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1029.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1029.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1029.8 MiB   1029.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1029.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1029.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1029.8 MiB   1029.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1029.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1030.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1030.0 MiB   1030.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1030.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1030.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1030.0 MiB   1030.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1030.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1030.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1030.0 MiB   1030.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1030.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1030.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1030.0 MiB   1030.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1030.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1030.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1030.4 MiB   1030.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1030.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1030.9 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1030.9 MiB   1030.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1030.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1031.7 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1031.7 MiB   1031.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1031.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1031.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1031.8 MiB   1031.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1031.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1031.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1031.9 MiB   1031.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1031.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1032.8 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1032.8 MiB   1032.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1032.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1033.5 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1033.5 MiB   1033.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1033.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1033.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1033.6 MiB   1033.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1033.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1033.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1033.6 MiB   1033.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1033.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1033.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1033.6 MiB   1033.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1033.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1034.2 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1034.2 MiB   1034.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1034.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1034.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1034.6 MiB   1034.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1034.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1035.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1035.1 MiB   1035.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1035.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1035.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1035.1 MiB   1035.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1035.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1035.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1035.3 MiB   1035.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1035.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1035.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1035.4 MiB   1035.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1035.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1036.2 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1036.2 MiB   1036.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1036.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.0 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.0 MiB   1037.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.2 MiB   1037.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.3 MiB   1037.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.6 MiB   1037.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.6 MiB   1037.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.6 MiB   1037.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.8 MiB   1037.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1037.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1037.9 MiB   1037.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1037.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1038.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1038.0 MiB   1038.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1038.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1038.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1038.4 MiB   1038.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1038.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1038.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1038.4 MiB   1038.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1038.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1038.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1038.6 MiB   1038.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1038.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1038.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1038.7 MiB   1038.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1038.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1038.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1038.7 MiB   1038.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1038.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1039.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1039.1 MiB   1039.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1039.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1039.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1039.2 MiB   1039.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1039.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1039.9 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1039.9 MiB   1039.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1039.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1040.5 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1040.5 MiB   1040.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1040.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1040.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1040.7 MiB   1040.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1040.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1041.6 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1041.6 MiB   1041.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1041.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1041.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1041.6 MiB   1041.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1041.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1041.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1041.7 MiB   1041.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1041.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1041.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1041.7 MiB   1041.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1041.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1041.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1041.8 MiB   1041.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1041.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1042.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1042.3 MiB   1042.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1042.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1042.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1042.7 MiB   1042.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1042.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1042.9 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1042.9 MiB   1042.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1042.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1043.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1043.0 MiB   1043.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1043.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1043.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1043.2 MiB   1043.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1043.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1043.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1043.5 MiB   1043.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1043.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1043.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1043.8 MiB   1043.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1043.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1043.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1043.8 MiB   1043.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1043.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1044.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1044.0 MiB   1044.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1044.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1044.9 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1044.9 MiB   1044.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1044.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1044.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1044.9 MiB   1044.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1044.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1044.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1044.9 MiB   1044.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1044.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1045.4 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1045.4 MiB   1045.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1045.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1045.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1045.4 MiB   1045.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1045.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1045.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1045.8 MiB   1045.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1045.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1045.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1045.8 MiB   1045.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1045.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1045.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1045.9 MiB   1045.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1045.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1046.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1046.0 MiB   1046.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1046.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1046.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1046.0 MiB   1046.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1046.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1046.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1046.3 MiB   1046.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1046.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1046.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1046.8 MiB   1046.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1046.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1046.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1046.8 MiB   1046.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1046.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1047.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1047.1 MiB   1047.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1047.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1047.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1047.7 MiB   1047.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1047.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1048.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1048.1 MiB   1048.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1048.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1048.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1048.6 MiB   1048.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1048.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1048.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1048.6 MiB   1048.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1048.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1048.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1048.9 MiB   1048.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1048.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1049.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1049.0 MiB   1049.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1049.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1049.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1049.4 MiB   1049.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1049.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1049.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1049.6 MiB   1049.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1049.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1049.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1049.8 MiB   1049.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1049.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1049.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1049.9 MiB   1049.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1049.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1050.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1050.0 MiB   1050.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1050.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1050.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1050.4 MiB   1050.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1050.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1050.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1050.8 MiB   1050.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1050.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1050.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1050.8 MiB   1050.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1050.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1050.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1050.8 MiB   1050.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1050.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1051.1 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1051.1 MiB   1051.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1051.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1051.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1051.1 MiB   1051.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1051.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1051.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1051.2 MiB   1051.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1051.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1052.1 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1052.1 MiB   1052.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1052.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1052.6 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1052.6 MiB   1052.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1052.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1052.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1052.7 MiB   1052.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1052.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1053.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1053.0 MiB   1053.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1053.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1053.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1053.3 MiB   1053.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1053.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1053.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1053.4 MiB   1053.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1053.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1053.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1053.4 MiB   1053.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1053.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1053.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1053.4 MiB   1053.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1053.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1053.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1053.8 MiB   1053.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1053.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1054.1 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1054.1 MiB   1054.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1054.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1054.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1054.2 MiB   1054.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1054.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1054.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1054.4 MiB   1054.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1054.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1054.8 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1054.8 MiB   1054.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1054.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.0 MiB   1055.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.5 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.5 MiB   1055.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.8 MiB   1055.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.8 MiB   1055.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.8 MiB   1055.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.8 MiB   1055.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1055.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1055.9 MiB   1055.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1055.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1056.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1056.4 MiB   1056.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1056.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1057.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1057.0 MiB   1057.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1057.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1057.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1057.1 MiB   1057.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1057.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1057.7 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1057.7 MiB   1057.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1057.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.0 MiB   1058.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.1 MiB   1058.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.2 MiB   1058.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.3 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.3 MiB   1058.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.3 MiB   1058.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.3 MiB   1058.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.3 MiB   1058.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1058.8 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1058.8 MiB   1058.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1058.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1059.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1059.2 MiB   1059.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1059.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1059.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1059.4 MiB   1059.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1059.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1060.1 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1060.1 MiB   1060.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1060.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1060.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1060.1 MiB   1060.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1060.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1060.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1060.5 MiB   1060.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1060.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1060.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1060.8 MiB   1060.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1060.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1060.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1060.8 MiB   1060.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1060.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1061.3 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1061.3 MiB   1061.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1061.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1061.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1061.3 MiB   1061.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1061.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1061.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1061.7 MiB   1061.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1061.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1062.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1062.4 MiB   1062.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1062.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1062.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1062.6 MiB   1062.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1062.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1062.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1062.9 MiB   1062.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1062.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1063.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1063.1 MiB   1063.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1063.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1063.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1063.1 MiB   1063.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1063.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1063.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1063.3 MiB   1063.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1063.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1063.3 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1063.3 MiB   1063.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1063.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1064.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1064.1 MiB   1064.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1064.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1064.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1064.1 MiB   1064.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1064.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1064.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1064.4 MiB   1064.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1064.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.3 MiB      0.9 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.3 MiB   1065.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.4 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.4 MiB   1065.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.6 MiB   1065.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.6 MiB   1065.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.6 MiB   1065.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.6 MiB   1065.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.8 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.8 MiB   1065.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1065.9 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1065.9 MiB   1065.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1065.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1066.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1066.3 MiB   1066.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1066.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1066.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1066.6 MiB   1066.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1066.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1067.0 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1067.0 MiB   1067.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1067.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1067.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1067.3 MiB   1067.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1067.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1068.0 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1068.0 MiB   1068.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1068.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1068.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1068.0 MiB   1068.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1068.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1068.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1068.0 MiB   1068.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1068.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1068.1 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1068.1 MiB   1068.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1068.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1068.5 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1068.5 MiB   1068.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1068.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1068.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1068.6 MiB   1068.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1068.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1069.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1069.3 MiB   1069.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1069.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1069.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1069.7 MiB   1069.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1069.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1070.1 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1070.1 MiB   1070.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1070.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1070.3 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1070.3 MiB   1070.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1070.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1070.7 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1070.7 MiB   1070.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1070.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1070.8 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1070.8 MiB   1070.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1070.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1070.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1070.8 MiB   1070.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1070.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1070.8 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1070.8 MiB   1070.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1070.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1071.2 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1071.2 MiB   1071.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1071.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1071.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1071.6 MiB   1071.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1071.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1071.6 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1071.6 MiB   1071.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1071.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1071.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1071.9 MiB   1071.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1071.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1072.2 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1072.2 MiB   1072.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1072.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1072.5 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1072.5 MiB   1072.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1072.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1072.8 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1072.8 MiB   1072.8 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1072.8 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.0 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.0 MiB   1073.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.0 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.0 MiB   1073.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.2 MiB   1073.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.2 MiB   1073.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.4 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.4 MiB   1073.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.7 MiB   1073.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1073.7 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1073.7 MiB   1073.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1073.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1074.4 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1074.4 MiB   1074.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1074.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1074.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1074.7 MiB   1074.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1074.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1075.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1075.0 MiB   1075.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1075.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1075.2 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1075.2 MiB   1075.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1075.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1075.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1075.2 MiB   1075.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1075.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1075.2 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1075.2 MiB   1075.2 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1075.2 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1075.6 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1075.6 MiB   1075.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1075.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1076.3 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1076.3 MiB   1076.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1076.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1076.6 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1076.6 MiB   1076.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1076.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1076.7 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1076.7 MiB   1076.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1076.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1077.3 MiB      0.6 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1077.3 MiB   1077.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1077.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1077.9 MiB      0.7 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1077.9 MiB   1077.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1077.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.3 MiB   1078.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.5 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.5 MiB   1078.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.5 MiB   1078.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.5 MiB   1078.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.5 MiB   1078.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.5 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.5 MiB   1078.5 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.5 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1078.9 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1078.9 MiB   1078.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1078.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1079.3 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1079.3 MiB   1079.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1079.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1080.1 MiB      0.8 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1080.1 MiB   1080.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1080.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1080.3 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1080.3 MiB   1080.3 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1080.3 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1080.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1080.6 MiB   1080.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1080.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1080.6 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1080.6 MiB   1080.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1080.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1080.9 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1080.9 MiB   1080.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1080.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1080.9 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1080.9 MiB   1080.9 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1080.9 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1081.0 MiB      0.1 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1081.0 MiB   1081.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1081.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1081.4 MiB      0.4 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1081.4 MiB   1081.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1081.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1081.6 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1081.6 MiB   1081.6 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1081.6 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1082.1 MiB      0.5 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1082.1 MiB   1082.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1082.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1082.1 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1082.1 MiB   1082.1 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1082.1 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1082.4 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1082.4 MiB   1082.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1082.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1083.4 MiB      1.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1083.4 MiB   1083.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1083.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1083.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1083.4 MiB   1083.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1083.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1083.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1083.4 MiB   1083.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1083.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1083.4 MiB      0.0 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1083.4 MiB   1083.4 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1083.4 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1083.7 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1083.7 MiB   1083.7 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1083.7 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1084.0 MiB      0.3 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


Filename: c:\Users\anmabe0066\Desktop\Extended-Essay\code\SequentialNNModel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   143   1084.0 MiB   1084.0 MiB           1       @profile
   144                                             def __predictIndividualValue(self, x: int, roundValues: bool = False) -> list:
   145   1084.0 MiB      0.0 MiB           1           if roundValues:
   146                                                     return self.standarisationFunction(round(self.model.predict(np.array([x]), verbose=0)[0][0]))
   147   1084.2 MiB      0.2 MiB           1           return self.standarisationFunction(self.model.predict(np.array([x]), verbose=5)[0][0])


